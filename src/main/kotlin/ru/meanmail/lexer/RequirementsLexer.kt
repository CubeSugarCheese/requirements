package ru.meanmail.lexer

import com.intellij.lexer.FlexLexer
import com.intellij.psi.TokenType
import com.intellij.psi.tree.IElementType
import ru.meanmail.psi.Types
import java.io.Reader
import java.util.*

/**
 * This class is a scanner generated by
 * [JFlex](http://www.jflex.de/) 1.7.0
 * from the specification file <tt>Requirements.flex</tt>
 */
class RequirementsLexer
/**
 * Creates a new scanner
 *
 * @param   zzReader  the java.io.Reader to read input from.
 */
    (private val zzReader: Reader?) : FlexLexer {

    /** the current state of the DFA  */
    private var zzState = 0

    /** the current lexical state  */
    private var zzLexicalState = YYINITIAL

    /** this buffer contains the current text to be matched and is
     * the source of the yytext() string  */
    private var zzBuffer: CharSequence = ""

    /** the textposition at the last accepting state  */
    private var zzMarkedPos = 0

    /** the current text position in the buffer  */
    private var zzCurrentPos = 0

    /** startRead marks the beginning of the yytext() string in the buffer  */
    private var zzStartRead = 0

    /** endRead marks the last character in the buffer, that has been read
     * from input  */
    private var zzEndRead = 0

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private var zzAtBOL = true

    /** zzAtEOF == true <=> the scanner is at the EOF  */
    private var zzAtEOF = false

    /** denotes if the user-EOF-code has already been executed  */
    private var zzEOFDone = false

    override fun getTokenStart() = zzStartRead
    override fun getTokenEnd() = tokenStart + yylength()

    internal var stack: Deque<Int> = ArrayDeque()

    fun yypush(newState: Int) {
        yybegin(newState)
        stack.push(newState)
    }

    fun yypop(): Int {
        if (stack.size == 0) {
            yyinitial()
            return YYINITIAL
        }
        val state: Int = stack.pop()
        if (stack.peek() == null) {
            yyinitial()
        } else {
            yybegin(stack.peek())
        }
        return state
    }

    fun yyinitial() {
        stack.clear()
        yypush(YYINITIAL)
    }

    override fun reset(
        buffer: CharSequence, start: Int, end: Int,
        initialState: Int
    ) {
        zzBuffer = buffer
        zzStartRead = start
        zzMarkedPos = tokenStart
        zzCurrentPos = zzMarkedPos
        zzAtEOF = false
        zzAtBOL = true
        zzEndRead = end
        yybegin(initialState)
    }

    /**
     * Refills the input buffer.
     *
     * @return      `false`, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private fun zzRefill() = true

    /**
     * Returns the current lexical state.
     */
    override fun yystate(): Int {
        return zzLexicalState
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    override fun yybegin(newState: Int) {
        zzLexicalState = newState
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    fun yytext(): CharSequence {
        return zzBuffer.subSequence(tokenStart, zzMarkedPos)
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     * A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    fun yycharat(pos: Int): Char {
        return zzBuffer[tokenStart + pos]
    }

    /**
     * Returns the length of the matched text region.
     */
    private fun yylength(): Int {
        return zzMarkedPos - tokenStart
    }

    /**
     * Reports an error that occurred while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the errormessage to display
     */
    private fun zzScanError(errorCode: Int) {
        throw Error(
            try {
                ZZ_ERROR_MSG[errorCode]
            } catch (e: ArrayIndexOutOfBoundsException) {
                ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
            }
        )
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     * This number must not be greater than yylength()!
     */
    fun yypushback(number: Int) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG)
        }

        zzMarkedPos -= number
    }

    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private fun zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true
        }
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    override fun advance(): IElementType? {
        var zzInput: Int
        var zzAction: Int

        // cached fields:
        var zzCurrentPosL: Int
        var zzMarkedPosL: Int
        var zzEndReadL = zzEndRead
        var zzBufferL = zzBuffer
        val zzTransL = ZZ_TRANS
        val zzRowMapL = ZZ_ROWMAP
        val zzAttrL = ZZ_ATTRIBUTE
        while (true) {
            zzMarkedPosL = zzMarkedPos
            zzAction = -1
            zzStartRead = zzMarkedPosL
            zzCurrentPos = tokenStart
            zzCurrentPosL = zzCurrentPos
            zzState = ZZ_LEXSTATE[zzLexicalState]

            // set up zzAction for empty match case:
            var zzAttributes = zzAttrL[zzState]
            if (zzAttributes and 1 == 1) {
                zzAction = zzState
            }

            while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/)
                    zzCurrentPosL += Character.charCount(zzInput)
                } else if (zzAtEOF) {
                    zzInput = YYEOF
                    break
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL
                    zzMarkedPos = zzMarkedPosL
                    val eof = zzRefill()
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos
                    zzMarkedPosL = zzMarkedPos
                    zzBufferL = zzBuffer
                    zzEndReadL = zzEndRead
                    if (eof) {
                        zzInput = YYEOF
                        break
                    } else {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/)
                        zzCurrentPosL += Character.charCount(zzInput)
                    }
                }
                val zzNext = zzTransL[zzRowMapL[zzState] + zzCmap(zzInput)]
                if (zzNext == -1) {
                    break
                }
                zzState = zzNext

                zzAttributes = zzAttrL[zzState]
                if (zzAttributes and 1 == 1) {
                    zzAction = zzState
                    zzMarkedPosL = zzCurrentPosL
                    if (zzAttributes and 8 == 8) break
                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL
            if (zzInput == YYEOF && tokenStart == zzCurrentPos) {
                zzAtEOF = true
                zzDoEOF()
                return null
            } else {
                when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
                    1 -> {
                        return Types.WHITE_SPACE
                    }
                    71 -> {
                    }
                    2 -> {
                        yyinitial()
                        return TokenType.BAD_CHARACTER
                    }
                    72 -> {
                    }
                    3 -> {
                        yypush(SHORT_OPTION_STATE)
                        return Types.SHORT_OPTION
                    }
                    73 -> {
                    }
                    4 -> {
                        return Types.COMMENT
                    }
                    74 -> {
                    }
                    5 -> {
                        yypush(REQ)
                        yypushback(yylength())
                    }
                    75 -> {
                    }
                    6 -> {
                        yyinitial()
                        return Types.EOL
                    }
                    76 -> {
                    }
                    7 -> {
                        yypop()
                        return Types.VERSION
                    }
                    77 -> {
                    }
                    8 -> {
                        yypop()
                        return Types.COMMENT
                    }
                    78 -> {
                    }
                    9 -> {
                        return Types.PYTHON_STR_C
                    }
                    79 -> {
                    }
                    10 -> {
                        yypop()
                        return Types.DQUOTE
                    }
                    80 -> {
                    }
                    11 -> {
                        yypop()
                        return Types.SQUOTE
                    }
                    81 -> {
                    }
                    12 -> {
                        yyinitial()
                        return Types.COMMENT
                    }
                    82 -> {
                    }
                    13 -> {
                        return Types.VERSION_CMP
                    }
                    83 -> {
                    }
                    14 -> {
                        return Types.LPARENTHESIS
                    }
                    84 -> {
                    }
                    15 -> {
                        return Types.RPARENTHESIS
                    }
                    85 -> {
                    }
                    16 -> {
                        yypush(DQUOTE_STR)
                        return Types.DQUOTE
                    }
                    86 -> {
                    }
                    17 -> {
                        yypush(SQUOTE_STR)
                        return Types.SQUOTE
                    }
                    87 -> {
                    }
                    18 -> {
                        return Types.PLUS
                    }
                    88 -> {
                    }
                    19 -> {
                        return Types.MINUS
                    }
                    89 -> {
                    }
                    20 -> {
                        return Types.SUB_DELIMS
                    }
                    90 -> {
                    }
                    21 -> {
                        return Types.COLON
                    }
                    91 -> {
                    }
                    22 -> {
                        return Types.QUESTION_MARK
                    }
                    92 -> {
                    }
                    23 -> {
                        return Types.LSBRACE
                    }
                    93 -> {
                    }
                    24 -> {
                        return Types.RSBRACE
                    }
                    94 -> {
                    }
                    25 -> {
                        return Types.AT
                    }
                    95 -> {
                    }
                    26 -> {
                        return Types.DOLLAR_SIGN
                    }
                    96 -> {
                    }
                    27 -> {
                        return Types.SHARP
                    }
                    97 -> {
                    }
                    28 -> {
                        return Types.PERCENT_SIGN
                    }
                    98 -> {
                    }
                    29 -> {
                        return Types.SLASH
                    }
                    99 -> {
                    }
                    30 -> {
                        return Types.DOT
                    }
                    100 -> {
                    }
                    31 -> {
                        return Types.UNDERSCORE
                    }
                    101 -> {
                    }
                    32 -> {
                        return Types.LBRACE
                    }
                    102 -> {
                    }
                    33 -> {
                        return Types.RBRACE
                    }
                    103 -> {
                    }
                    34 -> {
                        return Types.TILDA
                    }
                    104 -> {
                    }
                    35 -> {
                        return Types.LETTER
                    }
                    105 -> {
                    }
                    36 -> {
                        return Types.DIGIT
                    }
                    106 -> {
                    }
                    37 -> {
                        yypush(QUOTED_MARK)
                        return Types.SEMICOLON
                    }
                    107 -> {
                    }
                    38 -> {
                        return Types.COMMA
                    }
                    108 -> {
                    }
                    39 -> {
                        yypush(URI)
                        return Types.AT
                    }
                    109 -> {
                    }
                    40 -> {
                        yypush(URI)
                        yypushback(yylength())
                    }
                    110 -> {
                    }
                    41 -> {
                        return Types.IDENTIFIER
                    }
                    111 -> {
                    }
                    42 -> {
                        yypush(WAITING_VERSION)
                        return Types.VERSION_CMP
                    }
                    112 -> {
                    }
                    43 -> {
                        yypush(URI)
                        return Types.EDITABLE
                    }
                    113 -> {
                    }
                    44 -> {
                        yypush(URI)
                        return Types.REFER
                    }
                    114 -> {
                    }
                    45 -> {
                        yypush(URI)
                        return Types.INDEX_URL
                    }
                    115 -> {
                    }
                    46 -> {
                        yypush(URI)
                        return Types.FIND_LINKS
                    }
                    116 -> {
                    }
                    47 -> {
                        yypush(URI)
                        return Types.CONSTRAINT
                    }
                    117 -> {
                    }
                    48 -> {
                        yypush(WAITING_ALG)
                        return Types.EQUAL
                    }
                    118 -> {
                    }
                    49 -> {
                        yypush(WAITING_COLON)
                        return Types.IDENTIFIER
                    }
                    119 -> {
                    }
                    50 -> {
                        yypush(WAITING_HASH_VALUE)
                        return Types.COLON
                    }
                    120 -> {
                    }
                    51 -> {
                        yypush(REQ)
                        return Types.WHITE_SPACE
                    }
                    121 -> {
                    }
                    52 -> {
                        yypush(REQ)
                        return Types.COMMENT
                    }
                    122 -> {
                    }
                    53 -> {
                        yypush(REQ)
                        return Types.HEX
                    }
                    123 -> {
                    }
                    54 -> {
                        yypush(LONG_OPTION_STATE)
                        return Types.LONG_OPTION
                    }
                    124 -> {
                    }
                    55 -> {
                    }
                    125 -> {
                    }
                    56 -> {
                        return Types.OR
                    }
                    126 -> {
                    }
                    57 -> {
                        return Types.IN
                    }
                    127 -> {
                    }
                    58 -> {
                        yypush(WAITING_HASH)
                        return Types.LONG_OPTION
                    }
                    128 -> {
                    }
                    59 -> {
                        return Types.NOT
                    }
                    129 -> {
                    }
                    60 -> {
                        return Types.AND
                    }
                    130 -> {
                    }
                    61 -> {
                        yypush(WAITING_EQUAL)
                        return Types.HASH
                    }
                    131 -> {
                    }
                    62 -> {
                        return Types.ENV_VAR
                    }
                    132 -> {
                    }
                    63 -> {
                        return Types.BINARY_ALL
                    }
                    133 -> {
                    }
                    64 -> {
                        return Types.BINARY_NONE
                    }
                    134 -> {
                    }
                    65 -> {
                        return Types.NO_INDEX
                    }
                    135 -> {
                    }
                    66 -> {
                        yypush(BINARY)
                        return Types.NO_BINARY
                    }
                    136 -> {
                    }
                    67 -> {
                        yypush(BINARY)
                        return Types.ONLY_BINARY
                    }
                    137 -> {
                    }
                    68 -> {
                        yypush(URI)
                        return Types.TRUSTED_HOST
                    }
                    138 -> {
                    }
                    69 -> {
                        return Types.REQUIRE_HASHES
                    }
                    139 -> {
                    }
                    70 -> {
                        yypush(URI)
                        return Types.EXTRA_INDEX_URL
                    }
                    140 -> {
                    }
                    else -> zzScanError(ZZ_NO_MATCH)
                }
            }
        }
    }

    companion object {
        /** This character denotes the end of file  */
        const val YYEOF = -1

        /** initial size of the lookahead buffer  */
        private const val ZZ_BUFFERSIZE = 16384

        /** lexical states  */
        const val YYINITIAL = 0
        const val WAITING_VERSION = 2
        const val DQUOTE_STR = 4
        const val SQUOTE_STR = 6
        const val QUOTED_MARK = 8
        const val URI = 10
        const val REQ = 12
        const val SHORT_OPTION_STATE = 14
        const val LONG_OPTION_STATE = 16
        const val BINARY = 18
        const val WAITING_HASH = 20
        const val WAITING_EQUAL = 22
        const val WAITING_ALG = 24
        const val WAITING_COLON = 26
        const val WAITING_HASH_VALUE = 28

        /**
         * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
         * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
         * at the beginning of a line
         * l is of the form l = 2*k, k a non negative integer
         */
        private val ZZ_LEXSTATE = intArrayOf(
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
            8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
        )

        /**
         * Translates characters to character classes
         * Chosen bits are [7, 7, 7]
         * Total runtime size is 1928 bytes
         */
        fun zzCmap(ch: Int): Int {
            return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch shr 14].toInt() or
                    (ch shr 7 and 0x7f)].toInt() shl 7 or
                    (ch and 0x7f)].toInt()
        }

        /* The ZZ_CMAP_Z table has 68 entries */
        private val ZZ_CMAP_Z = zzUnpackCMap(
            "\u0001\u0000\u0043\u0080"
        )

        /* The ZZ_CMAP_Y table has 256 entries */
        private val ZZ_CMAP_Y = zzUnpackCMap(
            "\u0001\u0000\u0001\u0001\u002b\u0002\u0001\u0003\u0012\u0002\u0001\u0004\u001f\u0002\u0001\u0003\u009f\u0002"
        )

        /* The ZZ_CMAP_A table has 640 entries */
        private val ZZ_CMAP_A = zzUnpackCMap(
            "\u0009\u001d\u0001\u0000\u0001\u0018\u0002\u0019\u0001\u0018\u0012\u001d\u0001\u0000\u0001\u000a\u0001\u0034\u0001\u000d\u0001\u000c\u0001\u000e\u0001\u0016\u0001\u0035\u0001\u001f" +
                    "\u0001\u0020\u0001\u0003\u0001\u0001\u0001\u0006\u0001\u0002\u0001\u0011\u0001\u000f\u000a\u001b\u0001\u0004\u0001\u0005\u0001\u001e\u0001\u0015\u0001\u001e\u0001\u0007\u0001\u000b\u0006\u0036" +
                    "\u0014\u001a\u0001\u0008\u0001\u0010\u0001\u0009\u0001\u0033\u0001\u0012\u0001\u0033\u0001\u002f\u0001\u0039\u0001\u0031\u0001\u0038\u0001\u0028\u0001\u002c\u0001\u001a\u0001" +
                    "\u0024\u0001\u002b\u0001\u001a\u0001\u003a\u0001\u002e\u0001\u0030\u0001\u0026\u0001\u0025\u0001\u0021\u0001\u0037\u0001\u0029\u0001\u002a\u0001\u0023\u0001\u002d\u0001\u0027" +
                    "\u0001\u001a\u0001\u0032\u0001\u0022\u0001\u001a\u0001\u0013\u0001\u001c\u0001\u0014\u0001\u0017\u0006\u001d\u0001\u0019\u001a\u001d\u0001\u0000\u00df\u001d\u0001\u0000\u007f" +
                    "\u001d\u000b\u0000\u001d\u001d\u0002\u0019\u0005\u001d\u0001\u0000\u002f\u001d\u0001\u0000\u0020\u001d"
        )

        /**
         * Translates DFA states to action switch labels.
         */
        private val ZZ_ACTION = zzUnpack()
        private const val ZZ_ACTION_PACKED_0 =
            "\u000f\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0002\u0001\u0005\u0001\u0006" +
                    "\u0001\u0005\u0001\u0007\u0001\u0008\u0002\u0009\u0001\u000a\u0001\u000b\u0001\u0002\u0001\u000c" +
                    "\u0001\u0002\u0001\u000d\u0001\u000e\u0001\u000f\u0007\u0002\u0001\u0010\u0001\u0011\u0001\u0001" +
                    "\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019" +
                    "\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021" +
                    "\u0001\u0022\u0001\u0023\u0001\u0024\u0001\u0001\u0001\u0002\u0001\u0025\u0001\u0026\u0001\u0002" +
                    "\u0001\u0027\u0001\u0028\u0001\u0002\u0001\u0029\u0001\u002a\u0001\u002b\u0001\u002c\u0001\u002d" +
                    "\u0001\u002e\u0001\u002f\u0009\u0002\u0001\u0029\u0001\u0002\u0001\u0030\u0001\u0031\u0001\u0032" +
                    "\u0001\u0033\u0001\u0034\u0001\u0035\u0001\u0036\u0001\u0037\u0001\u0000\u0001\u000d\u0002\u0000" +
                    "\u0001\u0038\u0004\u0000\u0001\u0039\u0002\u0000\u0001\u003a\u0001\u002a\u0012\u0000\u0001\u003b" +
                    "\u0003\u0000\u0001\u003c\u001e\u0000\u0001\u003d\u0003\u0000\u0001\u003e\u000d\u0000\u0001\u003f" +
                    "\u000f\u0000\u0001\u0040\u0015\u0000\u0001\u0041\u000e\u0000\u0001\u0042\u001b\u0000\u0001\u0043" +
                    "\u0009\u0000\u0001\u0044\u000f\u0000\u0001\u0045\u0002\u0000\u0001\u0046\u000b\u0000"

        private fun zzUnpack(): IntArray {
            val result = IntArray(305)
            zzUnpack(ZZ_ACTION_PACKED_0, 0, result)
            return result
        }

        private fun zzUnpack(packed: String, offset: Int, result: IntArray): Int {
            var index = 0 /* index in packed string  */
            var unpackedIndex = offset /* index in unpacked array */
            val length = packed.length
            while (index < length) {
                var count = packed[index++].toInt()
                val value = packed[index++].toInt()
                do result[unpackedIndex++] = value while (--count > 0)
            }
            return unpackedIndex
        }

        /**
         * Translates a state to a row index in the transition table
         */
        private val ZZ_ROWMAP = zzUnpackRowMap()
        private const val ZZ_ROWMAP_PACKED_0 =
            "\u0000\u0000\u0000\u003b\u0000\u0076\u0000\u00b1\u0000\u00ec\u0000\u0127\u0000\u0162\u0000\u019d" +
                    "\u0000\u01d8\u0000\u0213\u0000\u024e\u0000\u0289\u0000\u02c4\u0000\u02ff\u0000\u033a\u0000\u0375" +
                    "\u0000\u03b0\u0000\u03eb\u0000\u0426\u0000\u0461\u0000\u03b0\u0000\u03b0\u0000\u049c\u0000\u04d7" +
                    "\u0000\u0512\u0000\u054d\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u0588\u0000\u05c3\u0000\u05fe" +
                    "\u0000\u0588\u0000\u03b0\u0000\u03b0\u0000\u0639\u0000\u0674\u0000\u06af\u0000\u06ea\u0000\u0725" +
                    "\u0000\u0760\u0000\u079b\u0000\u03b0\u0000\u03b0\u0000\u07d6\u0000\u03b0\u0000\u03b0\u0000\u03b0" +
                    "\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0" +
                    "\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0" +
                    "\u0000\u0811\u0000\u084c\u0000\u03b0\u0000\u03b0\u0000\u0887\u0000\u03b0\u0000\u03b0\u0000\u08c2" +
                    "\u0000\u08fd\u0000\u0887\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u03b0\u0000\u0938" +
                    "\u0000\u0973\u0000\u09ae\u0000\u09e9\u0000\u0a24\u0000\u0a5f\u0000\u0a9a\u0000\u0ad5\u0000\u0b10" +
                    "\u0000\u0b4b\u0000\u0b86\u0000\u03b0\u0000\u0bc1\u0000\u03b0\u0000\u0bfc\u0000\u0c37\u0000\u0c72" +
                    "\u0000\u03b0\u0000\u03b0\u0000\u049c\u0000\u03b0\u0000\u0cad\u0000\u0ce8\u0000\u03b0\u0000\u0d23" +
                    "\u0000\u0d5e\u0000\u0d99\u0000\u0dd4\u0000\u03b0\u0000\u0e0f\u0000\u0e4a\u0000\u03b0\u0000\u03b0" +
                    "\u0000\u0e85\u0000\u0ec0\u0000\u0efb\u0000\u0f36\u0000\u0f71\u0000\u0fac\u0000\u0fe7\u0000\u1022" +
                    "\u0000\u105d\u0000\u1098\u0000\u10d3\u0000\u110e\u0000\u0b4b\u0000\u1149\u0000\u0bc1\u0000\u1184" +
                    "\u0000\u11bf\u0000\u11fa\u0000\u03b0\u0000\u1235\u0000\u1270\u0000\u12ab\u0000\u03b0\u0000\u12e6" +
                    "\u0000\u1321\u0000\u135c\u0000\u1397\u0000\u13d2\u0000\u140d\u0000\u1448\u0000\u1483\u0000\u14be" +
                    "\u0000\u14f9\u0000\u1534\u0000\u156f\u0000\u15aa\u0000\u15e5\u0000\u1620\u0000\u165b\u0000\u1696" +
                    "\u0000\u16d1\u0000\u170c\u0000\u1747\u0000\u1782\u0000\u17bd\u0000\u17f8\u0000\u1833\u0000\u186e" +
                    "\u0000\u18a9\u0000\u18e4\u0000\u191f\u0000\u195a\u0000\u1995\u0000\u03b0\u0000\u19d0\u0000\u1a0b" +
                    "\u0000\u1a46\u0000\u03b0\u0000\u1a81\u0000\u1abc\u0000\u1af7\u0000\u1b32\u0000\u1b6d\u0000\u1ba8" +
                    "\u0000\u1be3\u0000\u1c1e\u0000\u1c59\u0000\u1c94\u0000\u1ccf\u0000\u1d0a\u0000\u1d45\u0000\u03b0" +
                    "\u0000\u1d80\u0000\u1dbb\u0000\u1df6\u0000\u1e31\u0000\u1e6c\u0000\u1ea7\u0000\u1ee2\u0000\u1f1d" +
                    "\u0000\u1f58\u0000\u1f93\u0000\u1fce\u0000\u2009\u0000\u2044\u0000\u207f\u0000\u20ba\u0000\u03b0" +
                    "\u0000\u20f5\u0000\u2130\u0000\u216b\u0000\u21a6\u0000\u21e1\u0000\u221c\u0000\u2257\u0000\u2292" +
                    "\u0000\u22cd\u0000\u2308\u0000\u2343\u0000\u237e\u0000\u23b9\u0000\u23f4\u0000\u242f\u0000\u246a" +
                    "\u0000\u24a5\u0000\u24e0\u0000\u251b\u0000\u2556\u0000\u2591\u0000\u03b0\u0000\u25cc\u0000\u2607" +
                    "\u0000\u2642\u0000\u267d\u0000\u26b8\u0000\u26f3\u0000\u272e\u0000\u2769\u0000\u27a4\u0000\u27df" +
                    "\u0000\u281a\u0000\u2855\u0000\u2890\u0000\u28cb\u0000\u03b0\u0000\u2906\u0000\u2941\u0000\u297c" +
                    "\u0000\u29b7\u0000\u29f2\u0000\u2a2d\u0000\u2a68\u0000\u2aa3\u0000\u2ade\u0000\u2b19\u0000\u2b54" +
                    "\u0000\u2b8f\u0000\u2bca\u0000\u2c05\u0000\u2c40\u0000\u2c7b\u0000\u2cb6\u0000\u2cf1\u0000\u2d2c" +
                    "\u0000\u2d67\u0000\u2da2\u0000\u2ddd\u0000\u2e18\u0000\u2e53\u0000\u2e8e\u0000\u2ec9\u0000\u2f04" +
                    "\u0000\u03b0\u0000\u2f3f\u0000\u2f7a\u0000\u2fb5\u0000\u2ff0\u0000\u302b\u0000\u3066\u0000\u30a1" +
                    "\u0000\u30dc\u0000\u3117\u0000\u03b0\u0000\u3152\u0000\u318d\u0000\u31c8\u0000\u3203\u0000\u323e" +
                    "\u0000\u3279\u0000\u32b4\u0000\u32ef\u0000\u332a\u0000\u3365\u0000\u33a0\u0000\u33db\u0000\u3416" +
                    "\u0000\u3451\u0000\u348c\u0000\u03b0\u0000\u34c7\u0000\u3502\u0000\u03b0\u0000\u353d\u0000\u3578" +
                    "\u0000\u35b3\u0000\u35ee\u0000\u3629\u0000\u3664\u0000\u369f\u0000\u36da\u0000\u3715\u0000\u3750" +
                    "\u0000\u378b"

        private fun zzUnpackRowMap(): IntArray {
            val result = IntArray(305)
            zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, 0, result)
            return result
        }

        private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                val high = packed[i++].toInt() shl 16
                result[j++] = high or packed[i++].toInt()
            }
            return j
        }

        /**
         * The transition table of the DFA
         */
        private val ZZ_TRANS = zzUnpackTrans()
        private const val ZZ_TRANS_PACKED_0 =
            "\u0001\u0010\u0001\u0011\u0001\u0012\u000a\u0011\u0001\u0013\u0002\u0011\u0001\u0014\u0001\u0015" +
                    "\u0006\u0011\u0001\u0016\u0001\u0010\u0002\u0017\u0001\u0016\u0004\u0011\u0012\u0017\u0003\u0011" +
                    "\u0005\u0017\u0001\u0010\u0003\u0018\u0006\u0011\u0001\u0018\u0002\u0011\u0001\u0019\u0002\u0011" +
                    "\u0001\u0014\u0002\u0018\u0005\u0011\u0001\u0016\u0001\u0010\u0002\u0018\u0001\u0016\u0004\u0011" +
                    "\u0012\u0018\u0003\u0011\u0005\u0018\u0001\u001a\u000f\u001b\u0001\u0014\u0007\u001b\u0001\u0016" +
                    "\u0001\u001a\u0003\u001b\u0001\u0011\u0016\u001b\u0001\u001c\u0001\u0011\u0005\u001b\u0001\u001a" +
                    "\u000f\u001b\u0001\u0014\u0007\u001b\u0001\u0016\u0001\u001a\u0003\u001b\u0001\u0011\u0016\u001b" +
                    "\u0001\u0011\u0001\u001d\u0005\u001b\u0001\u0010\u0009\u0011\u0001\u001e\u0002\u0011\u0001\u001f" +
                    "\u0002\u0011\u0001\u0014\u0004\u0011\u0001\u0020\u0001\u0011\u0001\u001e\u0001\u0016\u0001\u0010" +
                    "\u0002\u0011\u0001\u0016\u0001\u0011\u0001\u0021\u0001\u0022\u0001\u0023\u0001\u0024\u0003\u0011" +
                    "\u0001\u0025\u0001\u0026\u0001\u0011\u0001\u0027\u0001\u0011\u0001\u0028\u0001\u0029\u0003\u0011" +
                    "\u0001\u002a\u0004\u0011\u0001\u002b\u0001\u002c\u0005\u0011\u0001\u002d\u0001\u002e\u0001\u002f" +
                    "\u0001\u0030\u0001\u0031\u0002\u0030\u0001\u0032\u0001\u0033\u0001\u0034\u0001\u0030\u0001\u0035" +
                    "\u0001\u0036\u0001\u0037\u0001\u0038\u0001\u0039\u0001\u0014\u0001\u003a\u0001\u003b\u0001\u003c" +
                    "\u0001\u003d\u0002\u0030\u0001\u003e\u0001\u0016\u0001\u002d\u0001\u003f\u0001\u0040\u0001\u0016" +
                    "\u0002\u0011\u0002\u0030\u0012\u003f\u0002\u0011\u0001\u0030\u0005\u003f\u0001\u0041\u0001\u0011" +
                    "\u0001\u0042\u0002\u0011\u0001\u0043\u0001\u0044\u0001\u0011\u0001\u0033\u0001\u0034\u0001\u0045" +
                    "\u0001\u0046\u0004\u0011\u0001\u0014\u0001\u0047\u0003\u0011\u0001\u0048\u0001\u0011\u0001\u0045" +
                    "\u0001\u0016\u0001\u0041\u0002\u0049\u0001\u0016\u0001\u0011\u0001\u004a\u0001\u0022\u0001\u0023" +
                    "\u0012\u0049\u0003\u0011\u0005\u0049\u0001\u0010\u000f\u0011\u0001\u0014\u0007\u0011\u0001\u0016" +
                    "\u0001\u0010\u0002\u0011\u0001\u0016\u000b\u0011\u0001\u004b\u0001\u004c\u0001\u0011\u0001\u004d" +
                    "\u0001\u004e\u0004\u0011\u0001\u004f\u0009\u0011\u0001\u0010\u000f\u0011\u0001\u0014\u0007\u0011" +
                    "\u0001\u0016\u0001\u0010\u0002\u0011\u0001\u0016\u0006\u0011\u0001\u0050\u0001\u0011\u0001\u0051" +
                    "\u0001\u0052\u0001\u0011\u0001\u0053\u0001\u0054\u0001\u0011\u0001\u0055\u0001\u0056\u0004\u0011" +
                    "\u0001\u0057\u0009\u0011\u0001\u0010\u0003\u0011\u0001\u0058\u0001\u0011\u0001\u0044\u0009\u0011" +
                    "\u0001\u0014\u0007\u0011\u0001\u0016\u0001\u0010\u0002\u0059\u0001\u0016\u0004\u0011\u0012\u0059" +
                    "\u0003\u0011\u0005\u0059\u0001\u0010\u000f\u0011\u0001\u0014\u0007\u0011\u0001\u0016\u0001\u0010" +
                    "\u0002\u0011\u0001\u0016\u0007\u0011\u0001\u005a\u0016\u0011\u0001\u0010\u000f\u0011\u0001\u0014" +
                    "\u0004\u0011\u0001\u005b\u0002\u0011\u0001\u0016\u0001\u0010\u0002\u0011\u0001\u0016\u001e\u0011" +
                    "\u0001\u0010\u000f\u0011\u0001\u0014\u0007\u0011\u0001\u0016\u0001\u0010\u0002\u005c\u0001\u0016" +
                    "\u0004\u0011\u0012\u005c\u0003\u0011\u0005\u005c\u0001\u0010\u0003\u0011\u0001\u005d\u000b\u0011" +
                    "\u0001\u0014\u0007\u0011\u0001\u0016\u0001\u0010\u0002\u0011\u0001\u0016\u001e\u0011\u0001\u005e" +
                    "\u000c\u0011\u0001\u005f\u0002\u0011\u0001\u0014\u0007\u0011\u0001\u0016\u0001\u005e\u0001\u0011" +
                    "\u0001\u0060\u0001\u0016\u000b\u0011\u0001\u0060\u0003\u0011\u0001\u0060\u0002\u0011\u0001\u0060" +
                    "\u0001\u0011\u0001\u0060\u0004\u0011\u0001\u0060\u0001\u0011\u0002\u0060\u0001\u0011\u0001\u0010" +
                    "\u0018\u0000\u0001\u0010\u005e\u0000\u0001\u0061\u0038\u0000\u0018\u0013\u0002\u0000\u0021\u0013" +
                    "\u0018\u0000\u0001\u0062\u0003\u0000\u0001\u0062\u0020\u0000\u0001\u0063\u000e\u0000\u0002\u0063" +
                    "\u0007\u0000\u0002\u0017\u0005\u0000\u0012\u0017\u0003\u0000\u0005\u0017\u0001\u0000\u0003\u0018" +
                    "\u0006\u0000\u0001\u0018\u0006\u0000\u0002\u0018\u0007\u0000\u0002\u0018\u0005\u0000\u0012\u0018" +
                    "\u0003\u0000\u0005\u0018\u0018\u0019\u0002\u0000\u0021\u0019\u0001\u001a\u0018\u0000\u0001\u001a" +
                    "\u0036\u0000\u0001\u0064\u0025\u0000\u0018\u001f\u0002\u0000\u0021\u001f\u0015\u0000\u0001\u0021" +
                    "\u0047\u0000\u0001\u0065\u000b\u0000\u0001\u0066\u0035\u0000\u0001\u0067\u0001\u0068\u0035\u0000" +
                    "\u0001\u0069\u0047\u0000\u0001\u006a\u002a\u0000\u0001\u006b\u003e\u0000\u0001\u006c\u0009\u0000" +
                    "\u0001\u006d\u0030\u0000\u0001\u006e\u0014\u0000\u0001\u002d\u0004\u0000\u0001\u0043\u0007\u0000" +
                    "\u0001\u001f\u000b\u0000\u0001\u002d\u0021\u0000\u0001\u0041\u000c\u0000\u0001\u001f\u000b\u0000" +
                    "\u0001\u0041\u0023\u0000\u0001\u006f\u004d\u0000\u0001\u0070\u003a\u0000\u0001\u004a\u0026\u0000" +
                    "\u0001\u0047\u0001\u0071\u0001\u0000\u0001\u0047\u000a\u0000\u0001\u0047\u0001\u0000\u0002\u0071" +
                    "\u0007\u0000\u0002\u0049\u0005\u0000\u0012\u0049\u0003\u0000\u0005\u0049\u0029\u0000\u0001\u0072" +
                    "\u0037\u0000\u0001\u0073\u0039\u0000\u0001\u0074\u0047\u0000\u0001\u0075\u0005\u0000\u0001\u0076" +
                    "\u002a\u0000\u0001\u0077\u0038\u0000\u0001\u0078\u003f\u0000\u0001\u0079\u0034\u0000\u0001\u007a" +
                    "\u003b\u0000\u0001\u007b\u0008\u0000\u0001\u007c\u000d\u0000\u0001\u007d\u000e\u0000\u0002\u007d" +
                    "\u0007\u0000\u0002\u0059\u0005\u0000\u0012\u0059\u0003\u0000\u0005\u0059\u002f\u0000\u0001\u007e" +
                    "\u000d\u0000\u0001\u007f\u000e\u0000\u0002\u007f\u0007\u0000\u0002\u005c\u0005\u0000\u0012\u005c" +
                    "\u0003\u0000\u0005\u005c\u0001\u005e\u0018\u0000\u0001\u005e\u0021\u0000\u0018\u005f\u0002\u0000" +
                    "\u0021\u005f\u001b\u0000\u0001\u0060\u000c\u0000\u0001\u0060\u0003\u0000\u0001\u0060\u0002\u0000" +
                    "\u0001\u0060\u0001\u0000\u0001\u0060\u0004\u0000\u0001\u0060\u0001\u0000\u0002\u0060\u0024\u0000" +
                    "\u0001\u0080\u0046\u0000\u0001\u0081\u001d\u0000\u0001\u0082\u004b\u0000\u0001\u0083\u003a\u0000" +
                    "\u0001\u0084\u0041\u0000\u0001\u0085\u0031\u0000\u0001\u0086\u0051\u0000\u0001\u0087\u0004\u0000" +
                    "\u0001\u0071\u000e\u0000\u0002\u0071\u0007\u0000\u0002\u0049\u0005\u0000\u0012\u0049\u0003\u0000" +
                    "\u0005\u0049\u002d\u0000\u0001\u0088\u003b\u0000\u0001\u0089\u000e\u0000\u0001\u008a\u005b\u0000" +
                    "\u0001\u008b\u0042\u0000\u0001\u008c\u0046\u0000\u0001\u008d\u003b\u0000\u0001\u008e\u0028\u0000" +
                    "\u0001\u008f\u003a\u0000\u0001\u0090\u0039\u0000\u0001\u0091\u0043\u0000\u0001\u0092\u0036\u0000" +
                    "\u0001\u0093\u0034\u0000\u0001\u0094\u0039\u0000\u0001\u0095\u003d\u0000\u0001\u0096\u003d\u0000" +
                    "\u0001\u0097\u0023\u0000\u0001\u0098\u0056\u0000\u0001\u0099\u0036\u0000\u0001\u009a\u0032\u0000" +
                    "\u0001\u009b\u0043\u0000\u0001\u009c\u000d\u0000\u0001\u009d\u002a\u0000\u0001\u009e\u0034\u0000" +
                    "\u0001\u009f\u0044\u0000\u0001\u00a0\u0035\u0000\u0001\u00a1\u004a\u0000\u0001\u00a2\u002c\u0000" +
                    "\u0001\u00a3\u0036\u0000\u0001\u00a4\u0042\u0000\u0001\u00a5\u0030\u0000\u0001\u00a6\u003b\u0000" +
                    "\u0001\u00a7\u0041\u0000\u0001\u00a8\u003d\u0000\u0001\u00a9\u003a\u0000\u0001\u00aa\u002c\u0000" +
                    "\u0001\u00ab\u0041\u0000\u0001\u00ac\u0035\u0000\u0001\u00ad\u0019\u0000\u0001\u00ae\u005e\u0000" +
                    "\u0001\u00af\u003f\u0000\u0001\u00b0\u003e\u0000\u0001\u00b1\u003a\u0000\u0001\u00b2\u0036\u0000" +
                    "\u0001\u00b3\u0041\u0000\u0001\u00b4\u000a\u0000\u0001\u00b5\u005b\u0000\u0001\u00b6\u003f\u0000" +
                    "\u0001\u00b7\u0016\u0000\u0001\u00b8\u005c\u0000\u0001\u00b9\u0039\u0000\u0001\u00ba\u0045\u0000" +
                    "\u0001\u00bb\u0038\u0000\u0001\u00bc\u003c\u0000\u0001\u00bd\u0032\u0000\u0001\u00be\u004b\u0000" +
                    "\u0001\u00bf\u0039\u0000\u0001\u00c0\u0028\u0000\u0001\u00c1\u0016\u0000\u0001\u00c2\u0071\u0000" +
                    "\u0001\u00c3\u002a\u0000\u0001\u00c4\u0013\u0000\u0001\u00c5\u0066\u0000\u0001\u00c6\u0035\u0000" +
                    "\u0001\u00c7\u0015\u0000\u0001\u00c8\u0048\u0000\u0001\u00c9\u0051\u0000\u0001\u00ca\u0039\u0000" +
                    "\u0001\u00aa\u0041\u0000\u0001\u00cb\u0033\u0000\u0001\u00cc\u004a\u0000\u0001\u00cd\u002d\u0000" +
                    "\u0001\u00ce\u0037\u0000\u0001\u00cf\u0041\u0000\u0001\u00d0\u0036\u0000\u0001\u00d1\u003d\u0000" +
                    "\u0001\u00d2\u0034\u0000\u0001\u00d3\u003f\u0000\u0001\u00d4\u0038\u0000\u0001\u00d5\u003e\u0000" +
                    "\u0001\u00d6\u0032\u0000\u0001\u00d7\u0004\u0000\u0001\u00d8\u003e\u0000\u0001\u00d9\u002d\u0000" +
                    "\u0001\u00da\u003d\u0000\u0001\u00db\u0016\u0000\u0001\u00dc\u005e\u0000\u0001\u00dd\u0046\u0000" +
                    "\u0001\u00de\u0031\u0000\u0001\u00df\u0037\u0000\u0001\u00e0\u003c\u0000\u0001\u004b\u0014\u0000" +
                    "\u0001\u00e1\u002d\u0000\u0001\u00e2\u0033\u0000\u0001\u00e3\u0037\u0000\u0001\u00e4\u003f\u0000" +
                    "\u0001\u00e5\u0037\u0000\u0001\u00e6\u003f\u0000\u0001\u00e7\u001f\u0000\u0001\u00e8\u0054\u0000" +
                    "\u0001\u00e9\u0031\u0000\u0001\u00ea\u003b\u0000\u0001\u00eb\u0045\u0000\u0001\u00ec\u002d\u0000" +
                    "\u0001\u00ed\u0050\u0000\u0001\u00ee\u0026\u0000\u0001\u00ef\u003e\u0000\u0001\u00f0\u0040\u0000" +
                    "\u0001\u004d\u0046\u0000\u0001\u00f1\u0026\u0000\u0001\u00f2\u003d\u0000\u0001\u00f3\u003f\u0000" +
                    "\u0001\u00f4\u002d\u0000\u0001\u00f5\u0005\u0000\u0001\u00d7\u0001\u0000\u0001\u00f6\u0001\u00f7" +
                    "\u0005\u0000\u0001\u00f8\u002f\u0000\u0001\u00f9\u0044\u0000\u0001\u00fa\u0030\u0000\u0001\u00fb" +
                    "\u003e\u0000\u0001\u00fc\u0039\u0000\u0001\u00fd\u0041\u0000\u0001\u00fe\u0031\u0000\u0001\u00ff" +
                    "\u003e\u0000\u0001\u004e\u0033\u0000\u0001\u004f\u0041\u0000\u0001\u0100\u003e\u0000\u0001\u0101" +
                    "\u002e\u0000\u0001\u0102\u0040\u0000\u0001\u0103\u0034\u0000\u0001\u0104\u0047\u0000\u0001\u0105" +
                    "\u0034\u0000\u0001\u0106\u0034\u0000\u0001\u0107\u0041\u0000\u0001\u0108\u0032\u0000\u0001\u0109" +
                    "\u004a\u0000\u0001\u010a\u0032\u0000\u0001\u010b\u0033\u0000\u0001\u004c\u0042\u0000\u0001\u010c" +
                    "\u0021\u0000\u0001\u010d\u004b\u0000\u0001\u010e\u0045\u0000\u0001\u010f\u0036\u0000\u0001\u0110" +
                    "\u0041\u0000\u0001\u0111\u0039\u0000\u0001\u00aa\u0035\u0000\u0001\u0112\u0032\u0000\u0001\u0113" +
                    "\u0019\u0000\u0001\u0114\u005c\u0000\u0001\u0115\u003b\u0000\u0001\u0116\u003c\u0000\u0001\u00d7" +
                    "\u0037\u0000\u0001\u0117\u003e\u0000\u0001\u0118\u0035\u0000\u0001\u0119\u003b\u0000\u0001\u011a" +
                    "\u003b\u0000\u0001\u011b\u0042\u0000\u0001\u011c\u0035\u0000\u0001\u011d\u0038\u0000\u0001\u00aa" +
                    "\u0039\u0000\u0001\u011e\u0044\u0000\u0001\u011f\u0033\u0000\u0001\u0106\u003d\u0000\u0001\u0120" +
                    "\u0035\u0000\u0001\u0121\u003d\u0000\u0001\u0122\u003b\u0000\u0001\u0123\u0036\u0000\u0001\u0124" +
                    "\u003e\u0000\u0001\u00bb\u0036\u0000\u0001\u00bb\u0026\u0000\u0001\u0125\u0056\u0000\u0001\u0126" +
                    "\u001e\u0000\u0001\u0127\u004e\u0000\u0001\u0096\u0001\u00d7\u003e\u0000\u0001\u0128\u003f\u0000" +
                    "\u0001\u0129\u002b\u0000\u0001\u012a\u0047\u0000\u0001\u012b\u0034\u0000\u0001\u012c\u0042\u0000" +
                    "\u0001\u012d\u0032\u0000\u0001\u012e\u0038\u0000\u0001\u012f\u0037\u0000\u0001\u0130\u0046\u0000" +
                    "\u0001\u0131\u002e\u0000\u0001\u0100\u0017\u0000"

        private fun zzUnpackTrans(): IntArray {
            val result = IntArray(14278)
            zzUnpackTrans(ZZ_TRANS_PACKED_0, 0, result)
            return result
        }

        private fun zzUnpackTrans(packed: String, offset: Int, result: IntArray): Int {
            var i = 0 /* index in packed string  */
            var j = offset /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].toInt()
                var value = packed[i++].toInt()
                value--
                do result[j++] = value while (--count > 0)
            }
            return j
        }

        /* error codes */
        private const val ZZ_UNKNOWN_ERROR = 0
        private const val ZZ_NO_MATCH = 1
        private const val ZZ_PUSHBACK_2BIG = 2

        /* error messages for the codes above */
        private val ZZ_ERROR_MSG = arrayOf(
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
        )

        /**
         * ZZ_ATTRIBUTE[aState] contains the attributes of state `aState`
         */
        private val ZZ_ATTRIBUTE = zzUnpackAttribute()
        private const val ZZ_ATTRIBUTE_PACKED_0 =
            "\u000f\u0000\u0001\u0001\u0001\u0009\u0003\u0001\u0002\u0009\u0004\u0001\u0003\u0009\u0004\u0001" +
                    "\u0002\u0009\u0007\u0001\u0002\u0009\u0001\u0001\u0013\u0009\u0002\u0001\u0002\u0009\u0001\u0001" +
                    "\u0002\u0009\u0003\u0001\u0005\u0009\u000b\u0001\u0001\u0009\u0001\u0001\u0001\u0009\u0003\u0001" +
                    "\u0002\u0009\u0001\u0000\u0001\u0009\u0002\u0000\u0001\u0009\u0004\u0000\u0001\u0009\u0002\u0000" +
                    "\u0002\u0009\u0012\u0000\u0001\u0009\u0003\u0000\u0001\u0009\u001e\u0000\u0001\u0009\u0003\u0000" +
                    "\u0001\u0009\u000d\u0000\u0001\u0009\u000f\u0000\u0001\u0009\u0015\u0000\u0001\u0009\u000e\u0000" +
                    "\u0001\u0009\u001b\u0000\u0001\u0009\u0009\u0000\u0001\u0009\u000f\u0000\u0001\u0009\u0002\u0000" +
                    "\u0001\u0009\u000b\u0000"

        private fun zzUnpackAttribute(): IntArray {
            val result = IntArray(305)
            zzUnpack(ZZ_ATTRIBUTE_PACKED_0, 0, result)
            return result
        }

        /**
         * Unpacks the compressed character translation table.
         *
         * @param packed   the packed character translation table
         * @return         the unpacked character translation table
         */
        private fun zzUnpackCMap(packed: String): CharArray {
            var size = 0
            var k = 0
            val length = packed.length
            while (k < length) {
                size += packed[k].toInt()
                k += 2
            }
            val map = CharArray(size)
            var i = 0 /* index in packed string  */
            var j = 0 /* index in unpacked array */
            while (i < packed.length) {
                var count = packed[i++].toInt()
                val value = packed[i++]
                do map[j++] = value while (--count > 0)
            }
            return map
        }
    }
}
