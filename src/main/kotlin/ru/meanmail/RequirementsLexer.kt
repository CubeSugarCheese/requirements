package ru.meanmail

import com.intellij.lexer.FlexLexer
import com.intellij.psi.TokenType.BAD_CHARACTER
import com.intellij.psi.tree.IElementType
import ru.meanmail.psi.Types.Companion.AND
import ru.meanmail.psi.Types.Companion.AT
import ru.meanmail.psi.Types.Companion.COLON
import ru.meanmail.psi.Types.Companion.COMMA
import ru.meanmail.psi.Types.Companion.COMMENT
import ru.meanmail.psi.Types.Companion.CONSTRAINT
import ru.meanmail.psi.Types.Companion.DIGIT
import ru.meanmail.psi.Types.Companion.DOLLAR_SIGN
import ru.meanmail.psi.Types.Companion.DOT
import ru.meanmail.psi.Types.Companion.DQUOTE
import ru.meanmail.psi.Types.Companion.EDITABLE
import ru.meanmail.psi.Types.Companion.ENV_VAR
import ru.meanmail.psi.Types.Companion.EOL
import ru.meanmail.psi.Types.Companion.EXTRA_INDEX_URL
import ru.meanmail.psi.Types.Companion.FIND_LINKS
import ru.meanmail.psi.Types.Companion.IDENTIFIER
import ru.meanmail.psi.Types.Companion.IN
import ru.meanmail.psi.Types.Companion.INDEX_URL
import ru.meanmail.psi.Types.Companion.LBRACE
import ru.meanmail.psi.Types.Companion.LETTER
import ru.meanmail.psi.Types.Companion.LONG_OPTION
import ru.meanmail.psi.Types.Companion.LPARENTHESIS
import ru.meanmail.psi.Types.Companion.LSBRACE
import ru.meanmail.psi.Types.Companion.MINUS
import ru.meanmail.psi.Types.Companion.NOT
import ru.meanmail.psi.Types.Companion.NO_BINARY
import ru.meanmail.psi.Types.Companion.NO_INDEX
import ru.meanmail.psi.Types.Companion.ONLY_BINARY
import ru.meanmail.psi.Types.Companion.OR
import ru.meanmail.psi.Types.Companion.PERCENT_SIGN
import ru.meanmail.psi.Types.Companion.PLUS
import ru.meanmail.psi.Types.Companion.PYTHON_STR_C
import ru.meanmail.psi.Types.Companion.QUESTION_MARK
import ru.meanmail.psi.Types.Companion.RBRACE
import ru.meanmail.psi.Types.Companion.REFER
import ru.meanmail.psi.Types.Companion.REQUIRE_HASHES
import ru.meanmail.psi.Types.Companion.RPARENTHESIS
import ru.meanmail.psi.Types.Companion.RSBRACE
import ru.meanmail.psi.Types.Companion.SEMICOLON
import ru.meanmail.psi.Types.Companion.SHARP
import ru.meanmail.psi.Types.Companion.SHORT_OPTION
import ru.meanmail.psi.Types.Companion.SLASH
import ru.meanmail.psi.Types.Companion.SQUOTE
import ru.meanmail.psi.Types.Companion.SUB_DELIMS
import ru.meanmail.psi.Types.Companion.TILDA
import ru.meanmail.psi.Types.Companion.TRUSTED_HOST
import ru.meanmail.psi.Types.Companion.UNDERSCORE
import ru.meanmail.psi.Types.Companion.VERSION
import ru.meanmail.psi.Types.Companion.VERSION_CMP
import ru.meanmail.psi.Types.Companion.WHITE_SPACE
import java.io.Reader
import java.util.*

/**
 * This class is a scanner generated by
 * [JFlex](http://www.jflex.de/) 1.7.0
 * from the specification file <tt>RequirementsLexer.flex</tt>
 */
class RequirementsLexer
/**
 * Creates a new scanner
 *
 * @param   zzReader  the java.io.Reader to read input from.
 */
(private val zzReader: Reader?) : FlexLexer {

    /** the current state of the DFA  */
    private var zzState = 0
    /** the current lexical state  */
    private var zzLexicalState = YYINITIAL
    /** this buffer contains the current text to be matched and is
     * the source of the yytext() string  */
    private var zzBuffer: CharSequence = ""
    /** the textposition at the last accepting state  */
    private var zzMarkedPos = 0
    /** the current text position in the buffer  */
    private var zzCurrentPos = 0
    /** startRead marks the beginning of the yytext() string in the buffer  */
    private var zzStartRead = 0
    /** endRead marks the last character in the buffer, that has been read
     * from input  */
    private var zzEndRead = 0
    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private var zzAtBOL = true
    /** zzAtEOF == true <=> the scanner is at the EOF  */
    private var zzAtEOF = false
    /** denotes if the user-EOF-code has already been executed  */
    private var zzEOFDone = false

    override fun getTokenStart() = zzStartRead
    override fun getTokenEnd() = tokenStart + yylength()

    internal var stack: Deque<Int> = ArrayDeque<Int>()

    fun yypush(newState: Int) {
        yybegin(newState)
        stack.push(newState)
    }

    fun yypop(): Int {
        if (stack.size == 0) {
            yyinitial()
            return YYINITIAL
        }

        val state: Int = stack.pop()

        if (stack.peek() == null) {
            yyinitial()
        } else {
            yybegin(stack.peek())
        }

        return state
    }

    fun yyinitial() {
        stack.clear()
        yypush(YYINITIAL)
    }

    override fun reset(buffer: CharSequence, start: Int, end: Int,
                       initialState: Int) {
        zzBuffer = buffer
        zzStartRead = start
        zzMarkedPos = tokenStart
        zzCurrentPos = zzMarkedPos
        zzAtEOF = false
        zzAtBOL = true
        zzEndRead = end
        yybegin(initialState)
    }

    /**
     * Refills the input buffer.
     *
     * @return      `false`, iff there was new input.
     *
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    private fun zzRefill() = true

    /**
     * Returns the current lexical state.
     */
    override fun yystate(): Int {
        return zzLexicalState
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    override fun yybegin(newState: Int) {
        zzLexicalState = newState
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    fun yytext(): CharSequence {
        return zzBuffer.subSequence(tokenStart, zzMarkedPos)
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     * A value from 0 to yylength()-1.
     *
     * @return the character at position pos
     */
    fun yycharat(pos: Int): Char {
        return zzBuffer[tokenStart + pos]
    }

    /**
     * Returns the length of the matched text region.
     */
    private fun yylength(): Int {
        return zzMarkedPos - tokenStart
    }

    /**
     * Reports an error that occurred while scanning.
     *
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param   errorCode  the code of the error message to display
     */
    private fun zzScanError(errorCode: Int) {
        throw Error(
                try {
                    ZZ_ERROR_MSG[errorCode]
                } catch (e: ArrayIndexOutOfBoundsException) {
                    ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR]
                }
        )
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number  the number of characters to be read again.
     * This number must not be greater than yylength()!
     */
    fun yypushback(number: Int) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG)
        }

        zzMarkedPos -= number
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private fun zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return      the next token
     * @exception   java.io.IOException  if any I/O-Error occurs
     */
    override fun advance(): IElementType? {
        var zzInput: Int
        var zzAction: Int

        // cached fields:
        var zzCurrentPosL: Int
        var zzMarkedPosL: Int
        var zzEndReadL = zzEndRead
        var zzBufferL = zzBuffer

        val zzTransL = ZZ_TRANS
        val zzRowMapL = ZZ_ROWMAP
        val zzAttrL = ZZ_ATTRIBUTE

        while (true) {
            zzMarkedPosL = zzMarkedPos

            zzAction = -1

            zzStartRead = zzMarkedPosL
            zzCurrentPos = tokenStart
            zzCurrentPosL = zzCurrentPos

            zzState = ZZ_LEXSTATE[zzLexicalState]

            // set up zzAction for empty match case:
            var zzAttributes = zzAttrL[zzState]
            if (zzAttributes and 1 == 1) {
                zzAction = zzState
            }

            while (true) {
                if (zzCurrentPosL < zzEndReadL) {
                    zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/)
                    zzCurrentPosL += Character.charCount(zzInput)
                } else if (zzAtEOF) {
                    zzInput = YYEOF
                    break
                } else {
                    // store back cached positions
                    zzCurrentPos = zzCurrentPosL
                    zzMarkedPos = zzMarkedPosL
                    val eof = zzRefill()
                    // get translated positions and possibly new buffer
                    zzCurrentPosL = zzCurrentPos
                    zzMarkedPosL = zzMarkedPos
                    zzBufferL = zzBuffer
                    zzEndReadL = zzEndRead
                    if (eof) {
                        zzInput = YYEOF
                        break
                    } else {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/)
                        zzCurrentPosL += Character.charCount(zzInput)
                    }
                }
                val zzNext = zzTransL[zzRowMapL[zzState] + zzCmap(zzInput)]
                if (zzNext == -1) break
                zzState = zzNext

                zzAttributes = zzAttrL[zzState]
                if (zzAttributes and 1 == 1) {
                    zzAction = zzState
                    zzMarkedPosL = zzCurrentPosL
                    if (zzAttributes and 8 == 8) break
                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL

            if (zzInput == YYEOF && tokenStart == zzCurrentPos) {
                zzAtEOF = true
                zzDoEOF()
                when (zzLexicalState) {
                    ESCAPE_NEW_LINE -> {
                        yypop()
                        return EOL
                    } // fall though
                    279 -> {
                    }
                    else -> return null
                }
            } else {
                when (if (zzAction < 0) zzAction else ZZ_ACTION[zzAction]) {
                    1 -> {
                        return WHITE_SPACE
                    }
                    63 -> {
                    }
                    2 -> {
                        yyinitial()
                        return BAD_CHARACTER
                    }
                    64 -> {
                    }
                    3 -> {
                        yypush(SHORT_OPTION_STATE)
                        return SHORT_OPTION
                    }
                    65 -> {
                    }
                    4 -> {
                        return COMMENT
                    }
                    66 -> {
                    }
                    5 -> {
                        yypush(REQ)
                        yypushback(yylength())
                    }
                    67 -> {
                    }
                    6 -> {
                        yyinitial()
                        return EOL
                    }
                    68 -> {
                    }
                    7 -> {
                        yypop()
                        return VERSION
                    }
                    69 -> {
                    }
                    8 -> {
                        yypop()
                        return COMMENT
                    }
                    70 -> {
                    }
                    9 -> {
                        return PYTHON_STR_C
                    }
                    71 -> {
                    }
                    10 -> {
                        yypop()
                        return DQUOTE
                    }
                    72 -> {
                    }
                    11 -> {
                        yypop()
                        return SQUOTE
                    }
                    73 -> {
                    }
                    12 -> {
                        yyinitial()
                        return COMMENT
                    }
                    74 -> {
                    }
                    13 -> {
                        return VERSION_CMP
                    }
                    75 -> {
                    }
                    14 -> {
                        return LPARENTHESIS
                    }
                    76 -> {
                    }
                    15 -> {
                        return RPARENTHESIS
                    }
                    77 -> {
                    }
                    16 -> {
                        yypush(DQUOTE_STR)
                        return DQUOTE
                    }
                    78 -> {
                    }
                    17 -> {
                        yypush(SQUOTE_STR)
                        return SQUOTE
                    }
                    79 -> {
                    }
                    18 -> {
                        return PLUS
                    }
                    80 -> {
                    }
                    19 -> {
                        return MINUS
                    }
                    81 -> {
                    }
                    20 -> {
                        return SUB_DELIMS
                    }
                    82 -> {
                    }
                    21 -> {
                        return COLON
                    }
                    83 -> {
                    }
                    22 -> {
                        return QUESTION_MARK
                    }
                    84 -> {
                    }
                    23 -> {
                        return LSBRACE
                    }
                    85 -> {
                    }
                    24 -> {
                        return RSBRACE
                    }
                    86 -> {
                    }
                    25 -> {
                        return AT
                    }
                    87 -> {
                    }
                    26 -> {
                        return DOLLAR_SIGN
                    }
                    88 -> {
                    }
                    27 -> {
                        return SHARP
                    }
                    89 -> {
                    }
                    28 -> {
                        return PERCENT_SIGN
                    }
                    90 -> {
                    }
                    29 -> {
                        return SLASH
                    }
                    91 -> {
                    }
                    30 -> {
                        return DOT
                    }
                    92 -> {
                    }
                    31 -> {
                        return UNDERSCORE
                    }
                    93 -> {
                    }
                    32 -> {
                        return LBRACE
                    }
                    94 -> {
                    }
                    33 -> {
                        return RBRACE
                    }
                    95 -> {
                    }
                    34 -> {
                        return TILDA
                    }
                    96 -> {
                    }
                    35 -> {
                        return LETTER
                    }
                    97 -> {
                    }
                    36 -> {
                        return DIGIT
                    }
                    98 -> {
                    }
                    37 -> {
                        yypush(QUOTED_MARK)
                        return SEMICOLON
                    }
                    99 -> {
                    }
                    38 -> {
                        return COMMA
                    }
                    100 -> {
                    }
                    39 -> {
                        yypush(URI)
                        return AT
                    }
                    101 -> {
                    }
                    40 -> {
                        yypush(URI)
                        yypushback(yylength())
                    }
                    102 -> {
                    }
                    41 -> {
                        return IDENTIFIER
                    }
                    103 -> {
                    }
                    42 -> {
                        yypush(WAITING_VERSION)
                        return VERSION_CMP
                    }
                    104 -> {
                    }
                    43 -> {
                        yypop()
                        yypushback(yylength())
                    }
                    105 -> {
                    }
                    44 -> {
                        yypush(URI)
                        return EDITABLE
                    }
                    106 -> {
                    }
                    45 -> {
                        yypush(URI)
                        return REFER
                    }
                    107 -> {
                    }
                    46 -> {
                        yypush(URI)
                        return INDEX_URL
                    }
                    108 -> {
                    }
                    47 -> {
                        yypush(URI)
                        return FIND_LINKS
                    }
                    109 -> {
                    }
                    48 -> {
                        yypush(URI)
                        return CONSTRAINT
                    }
                    110 -> {
                    }
                    49 -> {
                        yypush(LONG_OPTION_STATE)
                        return LONG_OPTION
                    }
                    111 -> {
                    }
                    50 -> {
                        return BAD_CHARACTER
                    }
                    112 -> {
                    }
                    51 -> {
                        yypush(ESCAPE_NEW_LINE)
                    }
                    113 -> {
                    }
                    52 -> {
                        return OR
                    }
                    114 -> {
                    }
                    53 -> {
                        return IN
                    }
                    115 -> {
                    }
                    54 -> {
                        return NOT
                    }
                    116 -> {
                    }
                    55 -> {
                        return AND
                    }
                    117 -> {
                    }
                    56 -> {
                        return ENV_VAR
                    }
                    118 -> {
                    }
                    57 -> {
                        return NO_INDEX
                    }
                    119 -> {
                    }
                    58 -> {
                        return NO_BINARY
                    }
                    120 -> {
                    }
                    59 -> {
                        return ONLY_BINARY
                    }
                    121 -> {
                    }
                    60 -> {
                        return TRUSTED_HOST
                    }
                    122 -> {
                    }
                    61 -> {
                        return REQUIRE_HASHES
                    }
                    123 -> {
                    }
                    62 -> {
                        yypush(URI)
                        return EXTRA_INDEX_URL
                    }
                    124 -> {
                    }
                    else -> zzScanError(ZZ_NO_MATCH)
                }
            }
        }
    }

    companion object {

        /** This character denotes the end of file  */
        const val YYEOF = -1

        /** initial size of the lookahead buffer  */
        private const val ZZ_BUFFERSIZE = 16384

        /** lexical states  */
        const val YYINITIAL = 0
        const val WAITING_VERSION = 2
        const val DQUOTE_STR = 4
        const val SQUOTE_STR = 6
        const val QUOTED_MARK = 8
        const val URI = 10
        const val REQ = 12
        const val ESCAPE_NEW_LINE = 14
        const val SHORT_OPTION_STATE = 16
        const val LONG_OPTION_STATE = 18
        /**
         * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
         * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
         * at the beginning of a line
         * l is of the form l = 2*k, k a non negative integer
         */
        private val ZZ_LEXSTATE = intArrayOf(
                0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7,
                8, 8, 9, 9
        )

        /**
         * Translates characters to character classes
         * Chosen bits are [7, 7, 7]
         * Total runtime size is 1928 bytes
         */
        fun zzCmap(ch: Int): Int {
            return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch shr 14].toInt() or
                    (ch shr 7 and 0x7f)].toInt() shl 7 or
                    (ch and 0x7f)].toInt()
        }

        /* The ZZ_CMAP_Z table has 68 entries */
        private val ZZ_CMAP_Z = zzUnpackCMap(
                "\u0001\u0000\u0043\u0080")

        /* The ZZ_CMAP_Y table has 256 entries */
        private val ZZ_CMAP_Y = zzUnpackCMap(
                "\u0001\u0000\u0001\u0001\u002b\u0002\u0001\u0003\u0012\u0002\u0001\u0004\u001f\u0002\u0001\u0003\u009f\u0002")

        /* The ZZ_CMAP_A table has 640 entries */
        private val ZZ_CMAP_A = zzUnpackCMap(
                "\u0009\u001d\u0001\u0000\u0001\u0018\u0002\u0019\u0001\u0018\u0012\u001d\u0001\u0000\u0001\u000a\u0001\u0034\u0001\u000d\u0001\u000c\u0001\u000e\u0001\u0016\u0001\u0035\u0001\u001f" +
                        "\u0001\u0020\u0001\u0003\u0001\u0001\u0001\u0006\u0001\u0002\u0001\u0011\u0001\u000f\u000a\u001b\u0001\u0004\u0001\u0005\u0001\u001e\u0001\u0015\u0001\u001e\u0001\u0007\u0001\u000b\u001a\u001a" +
                        "\u0001\u0008\u0001\u0010\u0001\u0009\u0001\u0033\u0001\u0012\u0001\u0033\u0001\u002f\u0001\u0038\u0001\u0031\u0001\u0037\u0001\u0028\u0001\u002c\u0001\u001a\u0001\u0024\u0001\u002b" +
                        "\u0001\u001a\u0001\u0039\u0001\u002e\u0001\u0030\u0001\u0026\u0001\u0025\u0001\u0021\u0001\u0036\u0001\u0029\u0001\u002a\u0001\u0023\u0001\u002d\u0001\u0027\u0001\u001a\u0001\u0032" +
                        "\u0001\u0022\u0001\u001a\u0001\u0013\u0001\u001c\u0001\u0014\u0001\u0017\u0006\u001d\u0001\u0019\u001a\u001d\u0001\u0000\u00df\u001d\u0001\u0000\u007f\u001d\u000b\u0000" +
                        "\u001d\u001d\u0002\u0019\u0005\u001d\u0001\u0000\u002f\u001d\u0001\u0000\u0020\u001d")
        /**
         * Translates DFA states to action switch labels.
         */
        private val ZZ_ACTION = zzUnpack()
        private const val ZZ_ACTION_PACKED_0 = "\u000a\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0002\u0001\u0005\u0001\u0006" +
                "\u0001\u0005\u0001\u0007\u0001\u0008\u0002\u0009\u0001\u000a\u0001\u000b\u0001\u0002\u0001\u000c" +
                "\u0001\u0002\u0001\u000d\u0001\u000e\u0001\u000f\u0007\u0002\u0001\u0010\u0001\u0011\u0001\u0001" +
                "\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019" +
                "\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001\u0020\u0001\u0021" +
                "\u0001\u0022\u0001\u0023\u0001\u0024\u0001\u0001\u0001\u0025\u0001\u0026\u0001\u0002\u0001\u0027" +
                "\u0001\u0028\u0001\u0002\u0001\u0029\u0001\u002a\u0002\u002b\u0001\u002c\u0001\u002d\u0001\u002e" +
                "\u0001\u002f\u0001\u0030\u0008\u0002\u0001\u0031\u0001\u0032\u0001\u0033\u0001\u0000\u0001\u000d" +
                "\u0002\u0000\u0001\u0034\u0004\u0000\u0001\u0035\u0002\u0000\u0001\u002a\u000d\u0000\u0001\u0036" +
                "\u0003\u0000\u0001\u0037\u001c\u0000\u0001\u0038\u0030\u0000\u0001\u0039\u000e\u0000\u0001\u003a" +
                "\u001b\u0000\u0001\u003b\u0009\u0000\u0001\u003c\u000f\u0000\u0001\u003d\u0002\u0000\u0001\u003e" +
                "\u000b\u0000"

        private fun zzUnpack(): IntArray {
            val result = IntArray(278)
            zzUnpack(ZZ_ACTION_PACKED_0, 0, result)
            return result
        }

        private fun zzUnpack(packed: String, offset: Int, result: IntArray): Int {
            var index = 0       /* index in packed string  */
            var unpackedIndex = offset  /* index in unpacked array */
            val length = packed.length
            while (index < length) {
                var count = packed[index++].toInt()
                val value = packed[index++].toInt()
                do result[unpackedIndex++] = value while (--count > 0)
            }
            return unpackedIndex
        }

        /**
         * Translates a state to a row index in the transition table
         */
        private val ZZ_ROWMAP = zzUnpackRowMap()
        private const val ZZ_ROWMAP_PACKED_0 = "\u0000\u0000\u0000\u003a\u0000\u0074\u0000\u00ae\u0000\u00e8\u0000\u0122\u0000\u015c\u0000\u0196" +
                "\u0000\u01d0\u0000\u020a\u0000\u0244\u0000\u027e\u0000\u02b8\u0000\u02f2\u0000\u032c\u0000\u027e" +
                "\u0000\u027e\u0000\u0366\u0000\u03a0\u0000\u03da\u0000\u0414\u0000\u027e\u0000\u027e\u0000\u027e" +
                "\u0000\u044e\u0000\u0488\u0000\u04c2\u0000\u044e\u0000\u027e\u0000\u027e\u0000\u04fc\u0000\u0536" +
                "\u0000\u0570\u0000\u05aa\u0000\u05e4\u0000\u061e\u0000\u0658\u0000\u027e\u0000\u027e\u0000\u0692" +
                "\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e" +
                "\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u027e" +
                "\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u06cc\u0000\u027e\u0000\u027e\u0000\u0706\u0000\u027e" +
                "\u0000\u027e\u0000\u0740\u0000\u077a\u0000\u0706\u0000\u027e\u0000\u032c\u0000\u027e\u0000\u027e" +
                "\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u07b4\u0000\u07ee\u0000\u0828\u0000\u0862\u0000\u089c" +
                "\u0000\u08d6\u0000\u0910\u0000\u094a\u0000\u027e\u0000\u027e\u0000\u027e\u0000\u0366\u0000\u027e" +
                "\u0000\u0984\u0000\u09be\u0000\u027e\u0000\u09f8\u0000\u0a32\u0000\u0a6c\u0000\u0aa6\u0000\u027e" +
                "\u0000\u0ae0\u0000\u0b1a\u0000\u027e\u0000\u0b54\u0000\u0b8e\u0000\u0bc8\u0000\u0c02\u0000\u0c3c" +
                "\u0000\u0c76\u0000\u0cb0\u0000\u0cea\u0000\u0d24\u0000\u0d5e\u0000\u0d98\u0000\u0dd2\u0000\u0e0c" +
                "\u0000\u027e\u0000\u0e46\u0000\u0e80\u0000\u0eba\u0000\u027e\u0000\u0ef4\u0000\u0f2e\u0000\u0f68" +
                "\u0000\u0fa2\u0000\u0fdc\u0000\u1016\u0000\u1050\u0000\u108a\u0000\u10c4\u0000\u10fe\u0000\u1138" +
                "\u0000\u1172\u0000\u11ac\u0000\u11e6\u0000\u1220\u0000\u125a\u0000\u1294\u0000\u12ce\u0000\u1308" +
                "\u0000\u1342\u0000\u137c\u0000\u13b6\u0000\u13f0\u0000\u142a\u0000\u1464\u0000\u149e\u0000\u14d8" +
                "\u0000\u1512\u0000\u027e\u0000\u154c\u0000\u1586\u0000\u15c0\u0000\u15fa\u0000\u1634\u0000\u166e" +
                "\u0000\u16a8\u0000\u16e2\u0000\u171c\u0000\u1756\u0000\u1790\u0000\u17ca\u0000\u1804\u0000\u183e" +
                "\u0000\u1878\u0000\u18b2\u0000\u18ec\u0000\u1926\u0000\u1960\u0000\u199a\u0000\u19d4\u0000\u1a0e" +
                "\u0000\u1a48\u0000\u1a82\u0000\u1abc\u0000\u1af6\u0000\u1b30\u0000\u1b6a\u0000\u1ba4\u0000\u1bde" +
                "\u0000\u1c18\u0000\u1c52\u0000\u1c8c\u0000\u1cc6\u0000\u1d00\u0000\u1d3a\u0000\u1d74\u0000\u1dae" +
                "\u0000\u1de8\u0000\u1e22\u0000\u1e5c\u0000\u1e96\u0000\u1ed0\u0000\u1f0a\u0000\u1f44\u0000\u1f7e" +
                "\u0000\u1fb8\u0000\u1ff2\u0000\u027e\u0000\u202c\u0000\u2066\u0000\u20a0\u0000\u20da\u0000\u2114" +
                "\u0000\u214e\u0000\u2188\u0000\u21c2\u0000\u21fc\u0000\u2236\u0000\u2270\u0000\u22aa\u0000\u22e4" +
                "\u0000\u231e\u0000\u027e\u0000\u2358\u0000\u2392\u0000\u23cc\u0000\u2406\u0000\u2440\u0000\u247a" +
                "\u0000\u24b4\u0000\u24ee\u0000\u2528\u0000\u2562\u0000\u259c\u0000\u25d6\u0000\u2610\u0000\u264a" +
                "\u0000\u2684\u0000\u26be\u0000\u26f8\u0000\u2732\u0000\u276c\u0000\u27a6\u0000\u27e0\u0000\u281a" +
                "\u0000\u2854\u0000\u288e\u0000\u28c8\u0000\u2902\u0000\u293c\u0000\u027e\u0000\u2976\u0000\u29b0" +
                "\u0000\u29ea\u0000\u2a24\u0000\u2a5e\u0000\u2a98\u0000\u2ad2\u0000\u2b0c\u0000\u2b46\u0000\u027e" +
                "\u0000\u2b80\u0000\u2bba\u0000\u2bf4\u0000\u2c2e\u0000\u2c68\u0000\u2ca2\u0000\u2cdc\u0000\u2d16" +
                "\u0000\u2d50\u0000\u2d8a\u0000\u2dc4\u0000\u2dfe\u0000\u2e38\u0000\u2e72\u0000\u2eac\u0000\u027e" +
                "\u0000\u2ee6\u0000\u2f20\u0000\u027e\u0000\u2f5a\u0000\u2f94\u0000\u2fce\u0000\u3008\u0000\u3042" +
                "\u0000\u307c\u0000\u30b6\u0000\u30f0\u0000\u312a\u0000\u3164\u0000\u319e"

        private fun zzUnpackRowMap(): IntArray {
            val result = IntArray(278)
            zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, 0, result)
            return result
        }

        private fun zzUnpackRowMap(packed: String, offset: Int, result: IntArray): Int {
            var i = 0  /* index in packed string  */
            var j = offset  /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                val high = packed[i++].toInt() shl 16
                result[j++] = high or packed[i++].toInt()
            }
            return j
        }

        /**
         * The transition table of the DFA
         */
        private val ZZ_TRANS = zzUnpackTrans()
        private const val ZZ_TRANS_PACKED_0 = "\u0001\u000b\u0001\u000c\u0001\u000d\u000a\u000c\u0001\u000e\u0002\u000c\u0001\u000f\u0001\u0010" +
                "\u0006\u000c\u0001\u0011\u0001\u000b\u0002\u0012\u0001\u0011\u0004\u000c\u0012\u0012\u0003\u000c" +
                "\u0004\u0012\u0001\u000b\u0003\u0013\u0006\u000c\u0001\u0013\u0002\u000c\u0001\u0014\u0002\u000c" +
                "\u0001\u000f\u0002\u0013\u0005\u000c\u0001\u0011\u0001\u000b\u0002\u0013\u0001\u0011\u0004\u000c" +
                "\u0012\u0013\u0003\u000c\u0004\u0013\u0001\u0015\u000f\u0016\u0001\u000f\u0007\u0016\u0001\u0011" +
                "\u0001\u0015\u0003\u0016\u0001\u000c\u0016\u0016\u0001\u0017\u0001\u000c\u0004\u0016\u0001\u0015" +
                "\u000f\u0016\u0001\u000f\u0007\u0016\u0001\u0011\u0001\u0015\u0003\u0016\u0001\u000c\u0016\u0016" +
                "\u0001\u000c\u0001\u0018\u0004\u0016\u0001\u000b\u0009\u000c\u0001\u0019\u0002\u000c\u0001\u001a" +
                "\u0002\u000c\u0001\u000f\u0004\u000c\u0001\u001b\u0001\u000c\u0001\u0019\u0001\u0011\u0001\u000b" +
                "\u0002\u000c\u0001\u0011\u0001\u000c\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0003\u000c" +
                "\u0001\u0020\u0001\u0021\u0001\u000c\u0001\u0022\u0001\u000c\u0001\u0023\u0001\u0024\u0003\u000c" +
                "\u0001\u0025\u0004\u000c\u0001\u0026\u0001\u0027\u0004\u000c\u0001\u0028\u0001\u0029\u0001\u002a" +
                "\u0001\u002b\u0001\u002c\u0002\u002b\u0001\u002d\u0001\u002e\u0001\u002f\u0001\u002b\u0001\u0030" +
                "\u0001\u0031\u0001\u0032\u0001\u0033\u0001\u0034\u0001\u000f\u0001\u0035\u0001\u0036\u0001\u0037" +
                "\u0001\u0038\u0002\u002b\u0001\u0039\u0001\u0011\u0001\u0028\u0001\u003a\u0001\u003b\u0001\u0011" +
                "\u0002\u000c\u0002\u002b\u0012\u003a\u0002\u000c\u0001\u002b\u0004\u003a\u0001\u003c\u0004\u000c" +
                "\u0001\u003d\u0001\u003e\u0001\u000c\u0001\u002e\u0001\u002f\u0001\u003f\u0001\u0040\u0004\u000c" +
                "\u0001\u000f\u0001\u0041\u0003\u000c\u0001\u0042\u0001\u000c\u0001\u003f\u0001\u0011\u0001\u003c" +
                "\u0002\u0043\u0001\u0011\u0001\u000c\u0001\u0044\u0001\u001d\u0001\u001e\u0012\u0043\u0003\u000c" +
                "\u0004\u0043\u0001\u000b\u000f\u0045\u0001\u0046\u0008\u0045\u0001\u000b\u0020\u0045\u0001\u000b" +
                "\u000f\u000c\u0001\u000f\u0007\u000c\u0001\u0011\u0001\u000b\u0002\u000c\u0001\u0011\u000b\u000c" +
                "\u0001\u0047\u0001\u0048\u0001\u000c\u0001\u0049\u0001\u004a\u0004\u000c\u0001\u004b\u0008\u000c" +
                "\u0001\u000b\u000f\u000c\u0001\u000f\u0007\u000c\u0001\u0011\u0001\u000b\u0002\u000c\u0001\u0011" +
                "\u0006\u000c\u0001\u004c\u0001\u000c\u0001\u004d\u0001\u004e\u0001\u000c\u0001\u004f\u0001\u0050" +
                "\u0001\u000c\u0001\u0051\u0001\u0052\u0004\u000c\u0001\u0053\u0008\u000c\u0001\u000b\u0018\u0000" +
                "\u0001\u000b\u005c\u0000\u0001\u0054\u0037\u0000\u0018\u000e\u0002\u0000\u0020\u000e\u0010\u0000" +
                "\u0001\u0055\u0007\u0000\u0001\u0056\u0003\u0000\u0001\u0056\u001f\u0000\u0001\u0057\u000e\u0000" +
                "\u0002\u0057\u0007\u0000\u0002\u0012\u0005\u0000\u0012\u0012\u0003\u0000\u0004\u0012\u0001\u0000" +
                "\u0003\u0013\u0006\u0000\u0001\u0013\u0006\u0000\u0002\u0013\u0007\u0000\u0002\u0013\u0005\u0000" +
                "\u0012\u0013\u0003\u0000\u0004\u0013\u0018\u0014\u0002\u0000\u0020\u0014\u0001\u0015\u0018\u0000" +
                "\u0001\u0015\u0035\u0000\u0001\u0058\u0024\u0000\u0018\u001a\u0002\u0000\u0020\u001a\u0015\u0000" +
                "\u0001\u001c\u0046\u0000\u0001\u0059\u000b\u0000\u0001\u005a\u0034\u0000\u0001\u005b\u0001\u005c" +
                "\u0034\u0000\u0001\u005d\u0046\u0000\u0001\u005e\u0029\u0000\u0001\u005f\u003d\u0000\u0001\u0060" +
                "\u0009\u0000\u0001\u0061\u002f\u0000\u0001\u0062\u0013\u0000\u0001\u0028\u0004\u0000\u0001\u003d" +
                "\u0007\u0000\u0001\u001a\u000b\u0000\u0001\u0028\u0020\u0000\u0001\u003c\u000c\u0000\u0001\u001a" +
                "\u000b\u0000\u0001\u003c\u0035\u0000\u0001\u0063\u0039\u0000\u0001\u0044\u0025\u0000\u0001\u0041" +
                "\u0001\u0064\u0001\u0000\u0001\u0041\u000c\u0000\u0002\u0064\u0007\u0000\u0002\u0043\u0005\u0000" +
                "\u0012\u0043\u0003\u0000\u0004\u0043\u0029\u0000\u0001\u0065\u0036\u0000\u0001\u0066\u0038\u0000" +
                "\u0001\u0067\u0046\u0000\u0001\u0068\u0004\u0000\u0001\u0069\u002a\u0000\u0001\u006a\u0037\u0000" +
                "\u0001\u006b\u003e\u0000\u0001\u006c\u0033\u0000\u0001\u006d\u0037\u0000\u0001\u006e\u0045\u0000" +
                "\u0001\u006f\u001c\u0000\u0001\u0070\u004a\u0000\u0001\u0071\u0039\u0000\u0001\u0072\u0040\u0000" +
                "\u0001\u0073\u0030\u0000\u0001\u0074\u004f\u0000\u0001\u0075\u0004\u0000\u0001\u0064\u000e\u0000" +
                "\u0002\u0064\u0007\u0000\u0002\u0043\u0005\u0000\u0012\u0043\u0003\u0000\u0004\u0043\u002d\u0000" +
                "\u0001\u0076\u003a\u0000\u0001\u0077\u000d\u0000\u0001\u0078\u005a\u0000\u0001\u0079\u0041\u0000" +
                "\u0001\u007a\u0044\u0000\u0001\u007b\u003a\u0000\u0001\u007c\u0028\u0000\u0001\u007d\u0039\u0000" +
                "\u0001\u007e\u0037\u0000\u0001\u007f\u0038\u0000\u0001\u0080\u003c\u0000\u0001\u0081\u003c\u0000" +
                "\u0001\u0082\u0022\u0000\u0001\u0083\u0055\u0000\u0001\u0084\u0035\u0000\u0001\u0085\u0031\u0000" +
                "\u0001\u0086\u0042\u0000\u0001\u0087\u000c\u0000\u0001\u0088\u002a\u0000\u0001\u0089\u0033\u0000" +
                "\u0001\u008a\u0043\u0000\u0001\u008b\u0034\u0000\u0001\u008c\u0048\u0000\u0001\u008d\u002c\u0000" +
                "\u0001\u008e\u0034\u0000\u0001\u008f\u0040\u0000\u0001\u0090\u003c\u0000\u0001\u0091\u0039\u0000" +
                "\u0001\u0092\u002b\u0000\u0001\u0093\u0040\u0000\u0001\u0094\u0034\u0000\u0001\u0095\u0018\u0000" +
                "\u0001\u0096\u005d\u0000\u0001\u0097\u003e\u0000\u0001\u0098\u003d\u0000\u0001\u0099\u0039\u0000" +
                "\u0001\u009a\u0035\u0000\u0001\u009b\u0040\u0000\u0001\u009c\u0009\u0000\u0001\u009d\u005a\u0000" +
                "\u0001\u009e\u003c\u0000\u0001\u009f\u0038\u0000\u0001\u00a0\u0044\u0000\u0001\u00a1\u0037\u0000" +
                "\u0001\u00a2\u003b\u0000\u0001\u00a3\u0031\u0000\u0001\u00a4\u0049\u0000\u0001\u00a5\u0038\u0000" +
                "\u0001\u00a6\u0028\u0000\u0001\u00a7\u0015\u0000\u0001\u00a8\u006f\u0000\u0001\u00a9\u002a\u0000" +
                "\u0001\u00aa\u0012\u0000\u0001\u00ab\u0065\u0000\u0001\u00ac\u0034\u0000\u0001\u00ad\u0022\u0000" +
                "\u0001\u00ae\u0050\u0000\u0001\u00af\u0038\u0000\u0001\u0092\u0040\u0000\u0001\u00b0\u0032\u0000" +
                "\u0001\u00b1\u0048\u0000\u0001\u00b2\u002d\u0000\u0001\u00b3\u0036\u0000\u0001\u00b4\u0040\u0000" +
                "\u0001\u00b5\u0035\u0000\u0001\u00b6\u003c\u0000\u0001\u00b7\u0033\u0000\u0001\u00b8\u003e\u0000" +
                "\u0001\u00b9\u0037\u0000\u0001\u00ba\u003d\u0000\u0001\u00bb\u0031\u0000\u0001\u00bc\u0004\u0000" +
                "\u0001\u00bd\u003d\u0000\u0001\u00be\u002c\u0000\u0001\u00bf\u003c\u0000\u0001\u00c0\u0015\u0000" +
                "\u0001\u00c1\u005d\u0000\u0001\u00c2\u0045\u0000\u0001\u00c3\u0030\u0000\u0001\u00c4\u0036\u0000" +
                "\u0001\u00c5\u003b\u0000\u0001\u0047\u0013\u0000\u0001\u00c6\u002d\u0000\u0001\u00c7\u0032\u0000" +
                "\u0001\u00c8\u0036\u0000\u0001\u00c9\u003e\u0000\u0001\u00ca\u0036\u0000\u0001\u00cb\u003e\u0000" +
                "\u0001\u00cc\u001e\u0000\u0001\u00cd\u0053\u0000\u0001\u00ce\u0030\u0000\u0001\u00cf\u003a\u0000" +
                "\u0001\u00d0\u0044\u0000\u0001\u00d1\u002c\u0000\u0001\u00d2\u004e\u0000\u0001\u00d3\u0026\u0000" +
                "\u0001\u00d4\u003d\u0000\u0001\u00d5\u003f\u0000\u0001\u0049\u0044\u0000\u0001\u00d6\u0026\u0000" +
                "\u0001\u00d7\u003c\u0000\u0001\u00d8\u003e\u0000\u0001\u00d9\u002c\u0000\u0001\u00da\u0005\u0000" +
                "\u0001\u00bc\u0001\u0000\u0001\u00db\u0001\u00dc\u0005\u0000\u0001\u00dd\u002e\u0000\u0001\u00de" +
                "\u0043\u0000\u0001\u00df\u002f\u0000\u0001\u00e0\u003d\u0000\u0001\u00e1\u0038\u0000\u0001\u00e2" +
                "\u0040\u0000\u0001\u00e3\u0030\u0000\u0001\u00e4\u003d\u0000\u0001\u004a\u0032\u0000\u0001\u004b" +
                "\u0040\u0000\u0001\u00e5\u003d\u0000\u0001\u00e6\u002d\u0000\u0001\u00e7\u003f\u0000\u0001\u00e8" +
                "\u0033\u0000\u0001\u00e9\u0046\u0000\u0001\u00ea\u0033\u0000\u0001\u00eb\u0033\u0000\u0001\u00ec" +
                "\u0040\u0000\u0001\u00ed\u0031\u0000\u0001\u00ee\u0049\u0000\u0001\u00ef\u0031\u0000\u0001\u00f0" +
                "\u0032\u0000\u0001\u0048\u0041\u0000\u0001\u00f1\u0020\u0000\u0001\u00f2\u004a\u0000\u0001\u00f3" +
                "\u0044\u0000\u0001\u00f4\u0035\u0000\u0001\u00f5\u0040\u0000\u0001\u00f6\u0038\u0000\u0001\u0092" +
                "\u0034\u0000\u0001\u00f7\u0031\u0000\u0001\u00f8\u0018\u0000\u0001\u00f9\u005b\u0000\u0001\u00fa" +
                "\u003a\u0000\u0001\u00fb\u003b\u0000\u0001\u00bc\u0036\u0000\u0001\u00fc\u003d\u0000\u0001\u00fd" +
                "\u0034\u0000\u0001\u00fe\u003a\u0000\u0001\u00ff\u003a\u0000\u0001\u0100\u0041\u0000\u0001\u0101" +
                "\u0034\u0000\u0001\u0102\u0037\u0000\u0001\u0092\u0038\u0000\u0001\u0103\u0043\u0000\u0001\u0104" +
                "\u0032\u0000\u0001\u00eb\u003c\u0000\u0001\u0105\u0034\u0000\u0001\u0106\u003c\u0000\u0001\u0107" +
                "\u003a\u0000\u0001\u0108\u0035\u0000\u0001\u0109\u003d\u0000\u0001\u00a1\u0035\u0000\u0001\u00a1" +
                "\u0025\u0000\u0001\u010a\u0055\u0000\u0001\u010b\u001d\u0000\u0001\u010c\u004d\u0000\u0001\u0081" +
                "\u0001\u00bc\u003d\u0000\u0001\u010d\u003e\u0000\u0001\u010e\u002a\u0000\u0001\u010f\u0046\u0000" +
                "\u0001\u0110\u0033\u0000\u0001\u0111\u0041\u0000\u0001\u0112\u0031\u0000\u0001\u0113\u0037\u0000" +
                "\u0001\u0114\u0036\u0000\u0001\u0115\u0045\u0000\u0001\u0116\u002d\u0000\u0001\u00e5\u0016\u0000"

        private fun zzUnpackTrans(): IntArray {
            val result = IntArray(12760)
            zzUnpackTrans(ZZ_TRANS_PACKED_0, 0, result)
            return result
        }

        private fun zzUnpackTrans(packed: String, offset: Int, result: IntArray): Int {
            var i = 0       /* index in packed string  */
            var j = offset  /* index in unpacked array */
            val l = packed.length
            while (i < l) {
                var count = packed[i++].toInt()
                var value = packed[i++].toInt()
                value--
                do result[j++] = value while (--count > 0)
            }
            return j
        }


        /* error codes */
        private const val ZZ_UNKNOWN_ERROR = 0
        private const val ZZ_NO_MATCH = 1
        private const val ZZ_PUSHBACK_2BIG = 2

        /* error messages for the codes above */
        private val ZZ_ERROR_MSG = arrayOf(
                "Unknown internal scanner error",
                "Error: could not match input",
                "Error: pushback value was too large"
        )

        /**
         * ZZ_ATTRIBUTE[aState] contains the attributes of state `aState`
         */
        private val ZZ_ATTRIBUTE = zzUnpackAttribute()
        private const val ZZ_ATTRIBUTE_PACKED_0 = "\u000a\u0000\u0001\u0001\u0001\u0009\u0003\u0001\u0002\u0009\u0004\u0001\u0003\u0009\u0004\u0001" +
                "\u0002\u0009\u0007\u0001\u0002\u0009\u0001\u0001\u0013\u0009\u0001\u0001\u0002\u0009\u0001\u0001" +
                "\u0002\u0009\u0003\u0001\u0001\u0009\u0001\u0001\u0005\u0009\u0008\u0001\u0003\u0009\u0001\u0000" +
                "\u0001\u0009\u0002\u0000\u0001\u0009\u0004\u0000\u0001\u0009\u0002\u0000\u0001\u0009\u000d\u0000" +
                "\u0001\u0009\u0003\u0000\u0001\u0009\u001c\u0000\u0001\u0009\u0030\u0000\u0001\u0009\u000e\u0000" +
                "\u0001\u0009\u001b\u0000\u0001\u0009\u0009\u0000\u0001\u0009\u000f\u0000\u0001\u0009\u0002\u0000" +
                "\u0001\u0009\u000b\u0000"

        private fun zzUnpackAttribute(): IntArray {
            val result = IntArray(278)
            zzUnpack(ZZ_ATTRIBUTE_PACKED_0, 0, result)
            return result
        }

        /**
         * Unpacks the compressed character translation table.
         *
         * @param packed   the packed character translation table
         * @return         the unpacked character translation table
         */
        private fun zzUnpackCMap(packed: String): CharArray {
            var size = 0
            var k = 0
            val length = packed.length
            while (k < length) {
                size += packed[k].toInt()
                k += 2
            }
            val map = CharArray(size)
            var i = 0  /* index in packed string  */
            var j = 0  /* index in unpacked array */
            while (i < packed.length) {
                var count = packed[i++].toInt()
                val value = packed[i++]
                do map[j++] = value while (--count > 0)
            }
            return map
        }
    }
}
