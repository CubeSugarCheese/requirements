/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package ru.meanmail;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import ru.meanmail.psi.RequirementsTypes;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Requirements.flex</tt>
 */
class RequirementsLexer implements FlexLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int WAITING_VERSION = 2;
    public static final int WAITING_FILENAME = 4;
    public static final int WAITING_URL = 6;
    public static final int WAITING_PATH = 8;
    public static final int WAITING_EGG = 10;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
    };

    /**
     * Translates characters to character classes
     * Chosen bits are [11, 6, 4]
     * Total runtime size is 15296 bytes
     */
    public static int ZZ_CMAP(int ch) {
        return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch >> 10] << 6) | ((ch >> 4) & 0x3f)] << 4) | (ch & 0xf)];
    }

    /* The ZZ_CMAP_Z table has 1088 entries */
    static final char ZZ_CMAP_Z[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15" +
                    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1" +
                    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43" +
                    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1" +
                    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277" +
                    "\12");

    /* The ZZ_CMAP_Y table has 3328 entries */
    static final char ZZ_CMAP_Y[] = zzUnpackCMap(
            "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34" +
                    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13" +
                    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31" +
                    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41" +
                    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1" +
                    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22" +
                    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71" +
                    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1" +
                    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107" +
                    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13" +
                    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1" +
                    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121" +
                    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1" +
                    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13" +
                    "\1\24\1\31\4\13\1\145\1\146\1\147\1\150\1\13\1\150\1\13\1\151\1\147\1\152" +
                    "\5\13\1\153\1\121\1\1\1\154\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120" +
                    "\2\42\1\56\1\13\1\41\1\150\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1" +
                    "\13\1\36\2\121\1\155\1\120\4\1\4\13\1\42\1\121\1\156\1\151\7\13\1\151\3\13" +
                    "\1\26\1\100\2\13\1\41\1\146\4\1\1\157\1\13\1\160\17\13\1\161\21\13\1\144\2" +
                    "\13\1\144\1\162\1\13\1\41\3\13\1\163\1\164\1\165\1\133\1\164\2\1\1\166\1\167" +
                    "\1\63\1\170\1\1\1\171\1\1\1\133\3\1\2\13\1\63\1\172\1\173\1\174\1\127\1\175" +
                    "\1\1\2\13\1\146\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10\13\1\176" +
                    "\1\151\2\13\1\136\3\13\1\177\1\167\1\13\1\200\4\201\2\13\2\1\1\167\35\1\1" +
                    "\202\1\1\1\24\1\203\1\24\4\13\1\204\1\24\4\13\1\137\1\205\1\13\1\41\1\24\4" +
                    "\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2\1\10\13" +
                    "\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\206\7\13\1\16\1\1\1" +
                    "\207\1\210\5\13\1\211\1\13\1\120\1\26\3\1\1\207\2\13\1\26\1\1\3\13\1\151\4" +
                    "\13\1\57\1\121\1\13\1\212\2\13\1\41\2\13\1\151\1\13\1\133\4\13\1\213\1\121" +
                    "\1\13\1\120\3\13\1\200\1\41\1\121\1\13\1\113\4\13\1\32\1\154\1\13\1\214\1" +
                    "\215\1\216\1\201\2\13\1\137\1\57\7\13\1\217\1\121\72\13\1\151\1\13\1\220\2" +
                    "\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\200\1\221\1\35\1\222\1\223\6\13" +
                    "\1\16\1\1\1\224\25\13\1\41\1\1\4\13\1\210\2\13\1\26\2\1\1\42\1\13\1\1\1\13" +
                    "\1\225\1\226\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\227\1\24\1\31\1\56\4\13" +
                    "\1\120\1\230\1\231\2\1\1\232\1\13\1\14\1\233\2\41\2\1\7\13\1\31\4\1\3\13\1" +
                    "\150\7\1\1\234\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13\1\31" +
                    "\1\13\1\41\2\13\1\235\1\236\2\1\11\13\1\41\1\121\2\13\1\235\1\13\1\42\2\13" +
                    "\1\26\3\13\1\151\11\1\23\13\1\200\1\13\1\57\1\26\11\1\1\237\2\13\1\240\1\13" +
                    "\1\57\1\13\1\200\1\13\1\120\4\1\1\13\1\241\1\13\1\57\1\13\1\121\4\1\3\13\1" +
                    "\242\4\1\1\243\1\244\1\13\1\245\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1\13\1" +
                    "\200\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\146\3\1\3\13\1" +
                    "\32\3\13\1\32\60\1\4\13\1\200\1\1\1\56\1\167\3\13\1\31\1\1\1\13\1\146\1\121" +
                    "\3\13\1\134\1\1\2\13\1\246\4\13\1\247\1\250\2\1\1\13\1\22\1\13\1\251\4\1\1" +
                    "\252\1\27\1\146\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\253\1\254\1\150" +
                    "\10\1\4\13\1\31\1\121\2\1\4\13\1\255\1\121\12\1\3\13\1\256\1\63\1\257\2\1" +
                    "\4\13\1\260\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4\13" +
                    "\1\121\1\167\34\1\3\13\1\146\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\210\1\13" +
                    "\1\210\1\132\1\200\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\151\53\1\2" +
                    "\13\1\120\75\1\44\13\1\200\33\1\43\13\1\146\1\13\1\120\1\121\6\1\1\13\1\41" +
                    "\1\150\3\13\1\200\1\151\1\121\1\224\1\261\1\13\67\1\4\13\1\150\2\13\1\120" +
                    "\1\167\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1" +
                    "\31\1\133\1\146\1\262\114\1\1\263\1\264\1\265\1\1\1\266\11\1\1\267\33\1\5" +
                    "\13\1\134\3\13\1\147\1\270\1\271\1\272\3\13\1\273\1\274\1\13\1\275\1\276\1" +
                    "\77\24\13\1\256\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13" +
                    "\1\120\1\13\1\35\1\13\1\35\1\13\1\277\3\13\40\1\3\13\1\220\2\13\1\133\1\300" +
                    "\1\170\1\156\1\24\25\1\1\14\1\211\1\301\75\1\14\13\1\150\1\200\2\1\4\13\1" +
                    "\31\1\121\112\1\1\272\1\13\1\302\1\303\1\304\1\305\1\306\1\307\1\310\1\42" +
                    "\1\311\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\200\2\1\103" +
                    "\13\1\150\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

    /* The ZZ_CMAP_A table has 3232 entries */
    static final char ZZ_CMAP_A[] = zzUnpackCMap(
            "\11\0\1\4\1\2\1\1\1\5\1\3\22\0\1\4\2\0\1\6\7\0\1\23\1\0\1\33\1\16\1\17\12" +
                    "\15\1\14\1\0\1\7\1\10\1\7\1\0\1\44\32\13\1\45\1\12\1\11\1\0\1\15\1\0\1\31" +
                    "\1\34\1\32\1\43\1\41\1\37\1\27\1\24\1\30\2\43\1\40\1\43\1\22\1\43\1\26\1\43" +
                    "\1\36\1\20\1\25\1\43\1\21\3\43\1\35\12\0\1\1\24\0\1\42\12\0\1\42\4\0\1\42" +
                    "\5\0\27\42\1\0\12\42\4\0\14\42\16\0\5\42\7\0\1\42\1\0\1\42\1\0\5\42\1\0\2" +
                    "\42\2\0\4\42\1\0\1\42\6\0\1\42\1\0\3\42\1\0\1\42\1\0\4\42\1\0\23\42\1\0\11" +
                    "\42\1\0\26\42\2\0\1\42\6\0\10\42\10\0\16\42\1\0\1\42\1\0\2\42\1\0\2\42\1\0" +
                    "\1\42\10\0\13\42\5\0\3\42\15\0\12\42\4\0\6\42\1\0\10\42\2\0\12\42\1\0\23\42" +
                    "\2\0\14\42\2\0\11\42\4\0\1\42\5\0\16\42\2\0\14\42\4\0\5\42\1\0\10\42\6\0\20" +
                    "\42\2\0\13\42\2\0\16\42\1\0\1\42\3\0\4\42\2\0\11\42\2\0\2\42\2\0\4\42\10\0" +
                    "\1\42\4\0\2\42\1\0\1\42\1\0\3\42\1\0\6\42\4\0\2\42\1\0\2\42\1\0\2\42\1\0\2" +
                    "\42\2\0\1\42\1\0\5\42\4\0\2\42\2\0\3\42\3\0\1\42\7\0\4\42\1\0\1\42\7\0\20" +
                    "\42\13\0\3\42\1\0\11\42\1\0\2\42\1\0\2\42\1\0\5\42\2\0\12\42\1\0\3\42\1\0" +
                    "\3\42\2\0\1\42\30\0\1\42\7\0\3\42\1\0\10\42\2\0\6\42\2\0\2\42\2\0\3\42\10" +
                    "\0\2\42\4\0\2\42\1\0\1\42\1\0\1\42\20\0\2\42\1\0\6\42\3\0\3\42\1\0\4\42\3" +
                    "\0\2\42\1\0\1\42\1\0\2\42\3\0\2\42\3\0\3\42\3\0\5\42\3\0\3\42\1\0\4\42\2\0" +
                    "\1\42\6\0\1\42\10\0\4\42\1\0\10\42\1\0\3\42\1\0\30\42\3\0\10\42\1\0\3\42\1" +
                    "\0\4\42\7\0\2\42\1\0\3\42\5\0\4\42\1\0\5\42\2\0\4\42\5\0\2\42\7\0\1\42\2\0" +
                    "\2\42\16\0\3\42\1\0\10\42\1\0\7\42\1\0\3\42\1\0\5\42\5\0\4\42\7\0\1\42\12" +
                    "\0\6\42\2\0\2\42\1\0\22\42\3\0\10\42\1\0\11\42\1\0\1\42\2\0\7\42\3\0\1\42" +
                    "\4\0\6\42\1\0\1\42\1\0\10\42\2\0\2\42\14\0\17\42\1\0\12\42\7\0\2\42\1\0\1" +
                    "\42\2\0\2\42\1\0\1\42\2\0\1\42\6\0\4\42\1\0\7\42\1\0\3\42\1\0\1\42\1\0\1\42" +
                    "\2\0\2\42\1\0\15\42\1\0\3\42\2\0\5\42\1\0\1\42\1\0\6\42\2\0\12\42\2\0\4\42" +
                    "\10\0\2\42\13\0\1\42\1\0\1\42\1\0\1\42\4\0\12\42\1\0\24\42\3\0\5\42\1\0\12" +
                    "\42\6\0\1\42\11\0\6\42\1\0\1\42\5\0\1\42\2\0\13\42\1\0\15\42\1\0\4\42\2\0" +
                    "\7\42\1\0\1\42\1\0\4\42\2\0\1\42\1\0\4\42\2\0\7\42\1\0\1\42\1\0\4\42\2\0\16" +
                    "\42\2\0\6\42\2\0\13\42\3\0\13\42\7\0\15\42\1\0\7\42\13\0\4\42\14\0\1\42\1" +
                    "\0\2\42\14\0\4\42\3\0\1\42\4\0\2\42\15\0\3\42\11\0\1\42\23\0\10\42\1\0\23" +
                    "\42\1\0\2\42\6\0\6\42\5\0\15\42\1\0\1\42\1\0\1\42\1\0\1\42\1\0\6\42\1\0\7" +
                    "\42\1\0\1\42\3\0\3\42\1\0\7\42\3\0\4\42\2\0\6\42\14\0\2\1\25\0\1\42\4\0\1" +
                    "\42\14\0\1\42\15\0\1\42\2\0\1\42\4\0\1\42\2\0\12\42\1\0\1\42\3\0\5\42\6\0" +
                    "\1\42\1\0\1\42\1\0\1\42\1\0\4\42\1\0\1\42\5\0\5\42\4\0\1\42\1\0\5\42\6\0\15" +
                    "\42\7\0\10\42\11\0\7\42\1\0\7\42\6\0\3\42\11\0\5\42\2\0\5\42\3\0\7\42\2\0" +
                    "\2\42\2\0\3\42\5\0\16\42\1\0\12\42\1\0\1\42\7\0\11\42\2\0\27\42\2\0\15\42" +
                    "\3\0\1\42\1\0\1\42\2\0\1\42\16\0\1\42\2\0\5\42\12\0\6\42\2\0\6\42\2\0\6\42" +
                    "\11\0\13\42\1\0\2\42\2\0\7\42\4\0\5\42\3\0\5\42\5\0\12\42\1\0\5\42\1\0\1\42" +
                    "\1\0\2\42\1\0\2\42\1\0\12\42\3\0\15\42\3\0\2\42\30\0\16\42\4\0\1\42\2\0\6" +
                    "\42\2\0\6\42\2\0\6\42\2\0\3\42\3\0\14\42\1\0\16\42\1\0\2\42\1\0\1\42\15\0" +
                    "\1\42\2\0\4\42\4\0\10\42\1\0\5\42\12\0\6\42\2\0\1\42\1\0\14\42\1\0\2\42\3" +
                    "\0\1\42\2\0\4\42\1\0\2\42\12\0\10\42\6\0\6\42\1\0\2\42\5\0\10\42\1\0\3\42" +
                    "\1\0\13\42\4\0\3\42\4\0\5\42\2\0\1\42\11\0\5\42\5\0\3\42\3\0\13\42\1\0\1\42" +
                    "\3\0\10\42\6\0\1\42\1\0\7\42\1\0\1\42\1\0\4\42\1\0\2\42\6\0\1\42\5\0\7\42" +
                    "\2\0\7\42\3\0\6\42\1\0\1\42\10\0\6\42\2\0\10\42\10\0\6\42\2\0\1\42\3\0\1\42" +
                    "\13\0\10\42\5\0\15\42\3\0\2\42\6\0\5\42\3\0\6\42\10\0\10\42\2\0\7\42\16\0" +
                    "\4\42\4\0\3\42\15\0\1\42\2\0\2\42\2\0\4\42\1\0\14\42\1\0\1\42\1\0\7\42\1\0" +
                    "\21\42\1\0\4\42\2\0\10\42\1\0\7\42\1\0\14\42\1\0\4\42\1\0\5\42\1\0\1\42\3" +
                    "\0\11\42\1\0\10\42\2\0\2\42\5\0\1\42\12\0\2\42\1\0\2\42\1\0\5\42\6\0\2\42" +
                    "\1\0\1\42\2\0\1\42\1\0\12\42\1\0\4\42\1\0\1\42\1\0\1\42\6\0\1\42\4\0\1\42" +
                    "\1\0\1\42\1\0\1\42\1\0\3\42\1\0\2\42\1\0\1\42\2\0\1\42\1\0\1\42\1\0\1\42\1" +
                    "\0\1\42\1\0\1\42\1\0\2\42\1\0\1\42\2\0\4\42\1\0\7\42\1\0\4\42\1\0\4\42\1\0" +
                    "\1\42\1\0\12\42\1\0\5\42\1\0\3\42\1\0\5\42\1\0\5\42");

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\6\0\2\1\1\2\1\3\1\2\1\4\1\5\1\6" +
                    "\1\7\1\6\6\1\1\10\2\11\1\6\2\12\1\6" +
                    "\11\13\3\6\1\4\1\5\4\1\1\14\1\15\2\1" +
                    "\4\0\6\13\2\0\1\16\6\1\2\0\2\13\1\0" +
                    "\3\13\2\0\1\17\7\1\3\0\1\13\4\0\1\13" +
                    "\2\0\7\1\11\0\1\20\2\1\4\0\1\13\1\1" +
                    "\2\0\3\13\1\1\1\0\1\13\1\1\1\0\1\13" +
                    "\1\1\1\0\1\13\1\1\1\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[140];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a" +
                    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u01c8\0\u01c8\0\u01ee\0\u01ee" +
                    "\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u02d2\0\u01ee\0\u02f8" +
                    "\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0402\0\u0428" +
                    "\0\u044e\0\u0474\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558" +
                    "\0\u057e\0\u05a4\0\u01ee\0\u05ca\0\u05f0\0\u0616\0\u063c\0\344" +
                    "\0\344\0\u0662\0\u0688\0\u0344\0\u06ae\0\u03b6\0\u06d4\0\u06fa" +
                    "\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0804\0\u057e" +
                    "\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8\0\u090e\0\u0934" +
                    "\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2\0\u0a18\0\u0a3e\0\u0a64" +
                    "\0\u01ee\0\u0a8a\0\u0ab0\0\u0ad6\0\u0afc\0\u0b22\0\u0b48\0\u0b6e" +
                    "\0\u0b94\0\u03dc\0\u0bba\0\u0be0\0\u0c06\0\u0c2c\0\u0c52\0\u0c78" +
                    "\0\u0c9e\0\u0cc4\0\u0cea\0\u0d10\0\u0d36\0\u0d5c\0\u0d82\0\u0da8" +
                    "\0\u0dce\0\u0df4\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8" +
                    "\0\u0efe\0\u0f24\0\u0f4a\0\u01ee\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2" +
                    "\0\u1008\0\u102e\0\u1054\0\u107a\0\u10a0\0\u10c6\0\u10ec\0\u1112" +
                    "\0\u1138\0\u115e\0\u1184\0\u11aa\0\u11d0\0\u11f6\0\u121c\0\u1242" +
                    "\0\u1268\0\u128e\0\u12b4\0\u12da";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[140];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\7\1\10\1\11\1\10\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\7\1\20\1\7\1\20\1\7" +
                    "\1\21\3\7\1\22\2\7\1\23\3\7\1\24\1\25" +
                    "\2\7\1\26\5\7\1\27\1\30\1\31\1\11\1\31" +
                    "\1\12\1\13\4\30\1\20\33\30\1\20\3\11\1\12" +
                    "\1\13\4\20\1\32\1\33\1\20\2\34\1\35\3\33" +
                    "\1\20\7\33\1\34\6\33\1\20\1\33\3\20\3\11" +
                    "\1\12\1\13\4\20\1\36\1\37\1\20\2\40\1\41" +
                    "\1\42\2\37\1\20\1\43\2\37\1\44\3\37\1\40" +
                    "\1\45\2\37\1\46\2\37\1\20\1\37\3\20\3\11" +
                    "\1\12\1\13\11\20\1\47\27\20\3\11\1\12\1\13" +
                    "\1\50\35\20\1\51\1\20\2\7\1\0\1\7\2\0" +
                    "\1\7\4\0\1\7\1\0\1\7\1\0\26\7\1\0" +
                    "\1\7\1\10\1\11\1\10\1\0\1\11\1\7\4\0" +
                    "\1\7\1\0\1\7\1\0\26\7\2\0\3\11\1\0" +
                    "\1\11\44\0\2\12\41\0\3\11\1\12\1\13\40\0" +
                    "\2\14\1\0\1\7\2\52\1\14\4\52\1\14\1\52" +
                    "\1\14\1\52\26\14\1\52\10\0\1\53\103\0\2\7" +
                    "\1\0\1\7\2\0\1\7\4\0\1\7\1\0\1\7" +
                    "\1\0\2\7\1\54\23\7\1\0\2\7\1\0\1\7" +
                    "\2\0\1\7\4\0\1\7\1\0\1\7\1\0\6\7" +
                    "\1\55\1\7\1\56\15\7\1\0\2\7\1\0\1\7" +
                    "\2\0\1\7\4\0\1\7\1\0\1\7\1\0\11\7" +
                    "\1\57\14\7\1\0\2\7\1\0\1\7\2\0\1\7" +
                    "\4\0\1\7\1\0\1\7\1\0\17\7\1\60\2\7" +
                    "\1\61\3\7\1\0\2\7\1\0\1\7\2\0\1\7" +
                    "\4\0\1\7\1\0\1\7\1\0\16\7\1\62\7\7" +
                    "\1\0\2\7\1\0\1\7\2\0\1\7\4\0\1\7" +
                    "\1\0\1\7\1\0\11\7\1\63\14\7\1\0\2\30" +
                    "\1\0\1\30\2\0\4\30\1\0\34\30\1\31\1\11" +
                    "\1\31\1\0\1\11\4\30\1\0\33\30\12\0\1\64" +
                    "\1\34\1\0\2\34\1\0\3\34\1\0\16\34\1\0" +
                    "\1\34\14\0\1\64\1\33\1\65\2\34\1\66\3\33" +
                    "\1\0\7\33\1\34\6\33\1\0\1\33\14\0\1\64" +
                    "\1\33\1\0\2\34\1\66\3\33\1\0\7\33\1\34" +
                    "\6\33\1\0\1\33\15\0\1\34\1\0\2\34\1\66" +
                    "\3\34\1\0\16\34\1\0\1\34\14\0\2\36\1\0" +
                    "\2\36\1\0\3\36\1\0\16\36\1\0\1\36\14\0" +
                    "\1\36\1\40\1\67\2\40\1\41\3\40\1\0\16\40" +
                    "\1\0\1\40\14\0\1\36\1\40\1\0\2\40\1\41" +
                    "\3\40\1\0\16\40\1\0\1\40\15\0\1\41\1\0" +
                    "\6\41\1\0\16\41\1\0\1\41\14\0\1\36\1\40" +
                    "\1\67\2\40\1\41\1\40\1\70\1\40\1\0\16\40" +
                    "\1\0\1\40\14\0\1\36\1\40\1\67\2\40\1\41" +
                    "\3\40\1\0\1\40\1\71\1\40\1\72\12\40\1\0" +
                    "\1\40\14\0\1\36\1\40\1\67\2\40\1\41\3\40" +
                    "\1\0\4\40\1\73\11\40\1\0\1\40\14\0\1\36" +
                    "\1\40\1\67\2\40\1\41\3\40\1\0\11\40\1\74" +
                    "\4\40\1\0\1\40\14\0\1\36\1\40\1\67\2\40" +
                    "\1\41\3\40\1\0\4\40\1\75\11\40\1\0\1\40" +
                    "\21\0\1\76\67\0\1\77\4\0\2\100\1\0\1\100" +
                    "\3\0\3\100\1\0\31\100\1\0\1\100\2\52\2\0" +
                    "\42\52\2\7\1\0\1\7\2\0\1\7\4\0\1\7" +
                    "\1\0\1\7\1\0\3\7\1\101\22\7\1\0\2\7" +
                    "\1\0\1\7\2\0\1\7\4\0\1\7\1\0\1\7" +
                    "\1\0\6\7\1\102\17\7\1\0\2\7\1\0\1\7" +
                    "\2\0\1\7\4\0\1\7\1\0\1\7\1\0\4\7" +
                    "\1\103\21\7\1\0\2\7\1\0\1\7\2\0\1\7" +
                    "\4\0\1\7\1\0\1\7\1\0\6\7\1\104\17\7" +
                    "\1\0\2\7\1\0\1\7\2\0\1\7\4\0\1\7" +
                    "\1\0\1\7\1\0\17\7\1\105\6\7\1\0\2\7" +
                    "\1\0\1\7\2\0\1\7\4\0\1\7\1\0\1\7" +
                    "\1\0\21\7\1\106\4\7\13\0\1\107\45\0\1\110" +
                    "\45\0\1\36\1\40\1\0\2\40\1\41\2\40\1\111" +
                    "\1\0\16\40\1\0\1\40\14\0\1\36\1\40\1\0" +
                    "\2\40\1\41\3\40\1\0\1\40\1\112\14\40\1\0" +
                    "\1\40\14\0\1\36\1\40\1\0\2\40\1\41\3\40" +
                    "\1\113\16\40\1\0\1\40\14\0\1\36\1\40\1\0" +
                    "\2\40\1\41\3\40\1\0\1\40\1\114\14\40\1\0" +
                    "\1\40\14\0\1\36\1\40\1\0\2\40\1\41\3\40" +
                    "\1\0\12\40\1\115\3\40\1\0\1\40\14\0\1\36" +
                    "\1\40\1\0\2\40\1\41\3\40\1\0\14\40\1\116" +
                    "\1\40\1\0\1\40\15\0\1\117\1\0\2\117\1\0" +
                    "\3\117\1\0\20\117\31\0\1\120\16\0\2\7\1\0" +
                    "\1\7\2\0\1\7\4\0\1\7\1\121\1\7\1\0" +
                    "\4\7\1\122\21\7\1\0\2\7\1\0\1\7\2\0" +
                    "\1\7\4\0\1\7\1\0\1\7\1\0\7\7\1\123" +
                    "\16\7\1\0\2\7\1\0\1\7\2\0\1\7\4\0" +
                    "\1\7\1\0\1\7\1\0\1\7\1\124\3\7\1\125" +
                    "\20\7\1\0\2\7\1\0\1\7\2\0\1\7\4\0" +
                    "\1\7\1\121\1\7\1\0\4\7\1\126\21\7\1\0" +
                    "\2\7\1\0\1\7\2\0\1\7\4\0\1\7\1\0" +
                    "\1\7\1\0\4\7\1\127\21\7\1\0\2\7\1\0" +
                    "\1\7\2\0\1\7\4\0\1\7\1\0\1\7\1\0" +
                    "\22\7\1\130\3\7\13\0\1\131\45\0\1\132\45\0" +
                    "\1\36\1\40\1\121\2\40\1\41\3\40\1\133\16\40" +
                    "\1\0\1\40\14\0\1\36\1\40\1\0\2\40\1\41" +
                    "\3\40\1\0\2\40\1\134\13\40\1\0\1\40\22\0" +
                    "\1\135\3\0\1\136\33\0\1\36\1\40\1\121\2\40" +
                    "\1\41\3\40\1\137\16\40\1\0\1\40\14\0\1\36" +
                    "\1\40\1\0\2\40\1\41\3\40\1\140\16\40\1\0" +
                    "\1\40\14\0\1\36\1\40\1\0\2\40\1\41\3\40" +
                    "\1\0\15\40\1\141\1\0\1\40\15\0\1\117\1\0" +
                    "\1\117\1\142\1\0\3\117\1\0\20\117\31\0\1\143" +
                    "\16\0\2\7\1\0\1\7\2\0\1\7\4\0\1\7" +
                    "\1\0\1\7\1\0\1\7\1\144\3\7\1\125\20\7" +
                    "\1\0\2\7\1\0\1\7\2\0\1\7\4\0\1\7" +
                    "\1\121\1\7\1\0\1\7\1\130\24\7\1\0\2\7" +
                    "\1\0\1\7\2\0\1\7\4\0\1\7\1\0\1\7" +
                    "\1\0\1\7\1\145\4\7\1\146\17\7\1\0\2\7" +
                    "\1\0\1\7\2\0\1\7\4\0\1\7\1\0\1\7" +
                    "\1\0\6\7\1\55\17\7\1\0\2\7\1\0\1\7" +
                    "\2\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7" +
                    "\1\147\3\7\1\125\20\7\1\0\2\7\1\0\1\7" +
                    "\2\0\1\7\4\0\1\7\1\0\1\7\1\0\1\7" +
                    "\1\150\3\7\1\125\12\7\1\151\1\152\4\7\1\0" +
                    "\2\7\1\0\1\7\2\0\1\7\4\0\1\7\1\121" +
                    "\1\7\1\0\26\7\13\0\2\64\1\0\2\64\1\0" +
                    "\3\64\1\0\16\64\1\0\1\64\22\0\1\153\3\0" +
                    "\1\136\33\0\1\36\1\40\1\121\2\40\1\41\1\141" +
                    "\2\40\1\0\16\40\1\0\1\40\22\0\1\154\4\0" +
                    "\1\155\45\0\1\156\40\0\1\157\3\0\1\136\41\0" +
                    "\1\160\3\0\1\136\12\0\1\161\1\162\17\0\1\36" +
                    "\1\40\1\121\2\40\1\41\3\40\1\0\16\40\1\0" +
                    "\1\40\15\0\1\117\1\0\1\117\1\142\1\0\3\163" +
                    "\1\0\7\163\1\117\6\163\1\117\1\163\12\0\1\164" +
                    "\35\0\2\7\1\0\1\7\2\0\1\7\4\0\1\7" +
                    "\1\0\1\7\1\0\1\7\1\145\1\165\23\7\1\0" +
                    "\2\7\1\0\1\7\2\0\1\7\4\0\1\7\1\0" +
                    "\1\7\1\0\5\7\1\130\20\7\1\0\2\7\1\0" +
                    "\1\7\2\0\1\7\4\0\1\7\1\0\1\7\1\0" +
                    "\12\7\1\166\13\7\1\0\2\7\1\0\1\7\2\0" +
                    "\1\7\4\0\1\7\1\0\1\7\1\0\1\7\1\145" +
                    "\24\7\1\0\2\7\1\0\1\7\2\0\1\7\4\0" +
                    "\1\7\1\0\1\7\1\0\1\7\1\145\16\7\1\151" +
                    "\5\7\1\0\2\7\1\0\1\7\2\0\1\7\4\0" +
                    "\1\7\1\0\1\7\1\0\6\7\1\152\17\7\1\0" +
                    "\2\7\1\0\1\7\2\0\1\7\4\0\1\7\1\0" +
                    "\1\7\1\0\7\7\1\130\16\7\21\0\1\154\1\167" +
                    "\50\0\1\170\52\0\1\171\41\0\1\172\40\0\1\154" +
                    "\45\0\1\154\16\0\1\161\33\0\1\162\46\0\1\170" +
                    "\32\0\1\117\1\0\1\117\1\142\1\0\3\173\1\0" +
                    "\7\173\1\117\6\173\1\117\1\173\2\0\2\7\1\0" +
                    "\1\7\2\0\1\7\4\0\1\7\1\0\1\7\1\0" +
                    "\3\7\1\130\22\7\1\0\2\7\1\0\1\7\2\0" +
                    "\1\7\4\0\1\7\1\0\1\7\1\0\6\7\1\174" +
                    "\17\7\23\0\1\170\37\0\1\121\56\0\1\175\46\0" +
                    "\1\176\32\0\1\117\1\0\1\117\1\177\1\200\3\201" +
                    "\1\0\7\201\1\117\6\201\1\117\1\201\2\0\2\7" +
                    "\1\0\1\7\2\0\1\7\4\0\1\7\1\0\1\7" +
                    "\1\0\11\7\1\202\14\7\31\0\1\203\31\0\1\121" +
                    "\3\0\1\170\40\0\1\117\1\0\1\117\1\142\1\200" +
                    "\3\163\1\0\7\163\1\117\6\163\1\117\1\163\15\0" +
                    "\1\200\1\0\6\200\1\0\20\200\15\0\1\117\1\0" +
                    "\1\117\1\177\1\200\3\204\1\0\7\204\1\117\6\204" +
                    "\1\117\1\204\2\0\2\7\1\0\1\7\2\0\1\7" +
                    "\4\0\1\7\1\0\1\7\1\0\13\7\1\205\12\7" +
                    "\33\0\1\206\26\0\1\117\1\0\1\117\1\177\1\200" +
                    "\3\207\1\0\7\207\1\117\6\207\1\117\1\207\2\0" +
                    "\2\7\1\0\1\7\2\0\1\7\4\0\1\7\1\0" +
                    "\1\7\1\0\14\7\1\210\11\7\34\0\1\211\25\0" +
                    "\1\117\1\0\1\117\1\177\1\200\3\212\1\0\7\212" +
                    "\1\117\6\212\1\117\1\212\2\0\2\7\1\0\1\7" +
                    "\2\0\1\7\4\0\1\7\1\0\1\7\1\0\5\7" +
                    "\1\213\20\7\25\0\1\214\34\0\1\117\1\0\1\117" +
                    "\1\177\1\200\3\117\1\0\20\117\2\0\2\7\1\0" +
                    "\1\7\2\0\1\7\4\0\1\7\1\0\1\7\1\0" +
                    "\6\7\1\151\17\7\26\0\1\161\20\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4864];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String[] ZZ_ERROR_MSG = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\6\0\10\1\2\11\6\1\1\11\23\1\1\11\10\1" +
                    "\4\0\6\1\2\0\7\1\2\0\2\1\1\0\3\1" +
                    "\2\0\1\11\7\1\3\0\1\1\4\0\1\1\2\0" +
                    "\7\1\11\0\1\11\2\1\4\0\2\1\2\0\4\1" +
                    "\1\0\2\1\1\0\2\1\1\0\2\1\1\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[140];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private CharSequence zzBuffer = "";

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    RequirementsLexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        int size = 0;
        for (int i = 0, length = packed.length(); i < length; i += 2) {
            size += packed.charAt(i);
        }
        char[] map = new char[size];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < packed.length()) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    public final int getTokenStart() {
        return zzStartRead;
    }

    public final int getTokenEnd() {
        return getTokenStart() + yylength();
    }

    public void reset(CharSequence buffer, int start, int end, int initialState) {
        zzBuffer = buffer;
        zzCurrentPos = zzMarkedPos = zzStartRead = start;
        zzAtEOF = false;
        zzAtBOL = true;
        zzEndRead = end;
        yybegin(initialState);
    }

    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {
        return true;
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final CharSequence yytext() {
        return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer.charAt(zzStartRead + pos);
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Contains user EOF-code, which will be executed exactly once,
     * when the end of file is reached
     */
    private void zzDoEOF() {
        if (!zzEOFDone) {
            zzEOFDone = true;

        }
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public IElementType advance() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        CharSequence zzBufferL = zzBuffer;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + ZZ_CMAP(zzInput)];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                zzDoEOF();
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getPACKAGE();
                    }
                    // fall through
                    case 17:
                        break;
                    case 2: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getCRLF();
                    }
                    // fall through
                    case 18:
                        break;
                    case 3: {
                        return TokenType.WHITE_SPACE;
                    }
                    // fall through
                    case 19:
                        break;
                    case 4: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getCOMMENT();
                    }
                    // fall through
                    case 20:
                        break;
                    case 5: {
                        yybegin(WAITING_VERSION);
                        return RequirementsTypes.Companion.getSEPARATOR();
                    }
                    // fall through
                    case 21:
                        break;
                    case 6: {
                        return TokenType.BAD_CHARACTER;
                    }
                    // fall through
                    case 22:
                        break;
                    case 7: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getRSBRACE();
                    }
                    // fall through
                    case 23:
                        break;
                    case 8: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getLSBRACE();
                    }
                    // fall through
                    case 24:
                        break;
                    case 9: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getVERSION();
                    }
                    // fall through
                    case 25:
                        break;
                    case 10: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getFILENAME();
                    }
                    // fall through
                    case 26:
                        break;
                    case 11: {
                        yybegin(WAITING_EGG);
                        return RequirementsTypes.Companion.getPATH();
                    }
                    // fall through
                    case 27:
                        break;
                    case 12: {
                        yybegin(WAITING_FILENAME);
                        return RequirementsTypes.Companion.getREQUIREMENT();
                    }
                    // fall through
                    case 28:
                        break;
                    case 13: {
                        yybegin(WAITING_URL);
                        return RequirementsTypes.Companion.getREQUIREMENT_EDITABLE();
                    }
                    // fall through
                    case 29:
                        break;
                    case 14: {
                        yybegin(WAITING_EGG);
                        return RequirementsTypes.Companion.getBRANCH();
                    }
                    // fall through
                    case 30:
                        break;
                    case 15: {
                        yybegin(WAITING_PATH);
                        return RequirementsTypes.Companion.getSCHEMA();
                    }
                    // fall through
                    case 31:
                        break;
                    case 16: {
                        yybegin(YYINITIAL);
                        return RequirementsTypes.Companion.getEGG();
                    }
                    // fall through
                    case 32:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
